<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="2691" MadCap:lastWidth="670" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Introduction to SAL" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="MpatwKpUeALcWQKLNMWjRmPfGRG7WBYD2HADgy256H9oBJAEIWNvjeILEhsZ54rqc5AaCLdvqZzvIHdoRW0vTAV9R8IY1XSSLIMzHy2rot/PXHTJSPlfXekNGZ0YUCJsXBmDVmTImoZdOCzuzd3oD0GGxlKz4KAY22qURDBux9SebGVW0XCW+X/6UjXNeQv2QgPqw3HyAaR0fVB2dO4KLcwXlouRjLqm1gqpUA/MplXIxRaJfBe+BjxRVmlgYujI7vbk8sqB3vCPhikhMloRHClYe+94xHc8f7A9N5N48TiH05d0RrzPVljHnyJX+5TYYKiAmQuhzESIAm6OAJnscYWUxAiO/YK+pcJ2P6N9NuhTA2qT6TAlTbm7TZhPrmv62bgS0fNBTVUZGBVqOps5Tc2s7Zagy+p637xRdNeyfaEvM4bQmyOTMXw5pWqMQbIJGnedyx2/0443CEUwdh+2vs1mE8YoAYjJixLMFljuq/aBpGL1uOZykPCBUeu3ieKYB9TIOwa1Z1oe+aYBmRiVZ/Pc3P3PnmNbZwIOH3JXPNM+boAGM6a6DcE64WtDXHbtraBtdu89rgJGSLbnuEsqTa3mcGKtH45ba4ZiRVcLUmkUOVsPtPo5Rh9boPpi7MTZ3xxdXiIu9RrB6jZ1Shc/qo+QGPgr2G2tmSRpXxBLqnaEh+Tgb7Juv4H2z30FKQcSh8ha0lXKz7iYvD8R+IPKrSRAw6XOv9S6a9AwOLNInqtYMncJiHpJ/E3GFN6uDjYhWHu4gYWjO7daN6H0Ubh+tK8TrSTGFVNaSeRYiW/cAfSiS2Y075nkOZCUBoafoPHG9sA7C7UH4dWC4S8AMZP/eC6J7X/H28+xJlxgplLzsq5zpvIHkQXUyuU26kKSNqkz29vfAl5NZrLTuFfdeuy1xStSOx6YbsnA3UjyXEuN+9PIZdzYBgLVyQSvke+N1H4+1vxgmKRqncC5GW8w17ezHvAl6tB6b11oXXijkvSZfy13Tyt4F6k+ukJQ3OdydK1V" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Calling Conventions</title>
        <link href="../Resources/TableStyles/o_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Invisible.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Invisible.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH01 - Introduction/Calling_Conventions.htm" style="">Open topic with navigation</a>
        </p>
        <h1 style="page-break-before: avoid;"><a name="kanchor5"></a>Calling Conventions</h1>
        <p class="Body">Most SAL functions take input data and produce output data. Input and output <a name="kanchor6"></a>data arguments, vector or scalar, are passed by reference. Other arguments passed to SAL functions include:</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Invisible.css');" class="TableStyle_o_Invisible" cellspacing="0">
            <col style="width: 108px;" />
            <col style="width: 345px;" />
            <tr>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColSep" style="font-weight: bold;"><a name="kanchor7"></a>Address strides</td>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColEnd">Specifies how a function should step through input and output data. </td>
            </tr>
            <tr>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColSep" style="font-weight: bold;"><a name="kanchor8"></a>Flags</td>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColEnd">Directs function behaviors, such as directional flags that determine forward or inverse discrete Fourier transform behavior.</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColSep" style="font-weight: bold;"><a name="kanchor9"></a>Element counts</td>
                <td class="TableStyle_o_Invisible_Body_0_0_RowSep_ColEnd">Specifies the number of elements to process.</td>
            </tr>
        </table>
        <p class="Body">Address strides, flags, and element counts are integer values and, unlike input and output data, are passed to a function directly, not by reference.</p>
        <h2><a name="Address_strides"></a>Address Strides</h2>
        <p class="Body">Address strides govern how functions step through input and output data buffers, operating on every element, every second element, every third element, and so on. <a name="kanchor10"></a></p>
        <p class="Body">When operating on real, integer, single-precision split complex, or double-precision split complex vectors and matrices, you must use address strides that are multiples of one. For example:</p>
        <ul>
            <li value="1">An address stride of "1" addresses every data element</li>
            <li value="2">An address stride of "2" addresses every other data element</li>
            <li value="3">And so on...</li>
        </ul>
        <table class="TableStyle_o_Note" style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 501px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">Unless otherwise indicated, address strides for real and integer vectors increment 32 bits per data element.</td>
                </tr>
            </tbody>
        </table>
        <p class="Body">Single-precision interleaved complex and double-precision interleaved complex  data is stored as an <i>ordered pair</i> of floating-point numbers. For these data types, the term "element" refers to one <i>pair</i>.  Therefore, when operating on vectors and matrices whose elements are of one of these types, you must use address strides that are multiples of two. For example:</p>
        <ul>
            <li value="1">An address stride of "2" addresses every data element</li>
            <li value="2">An address stride of "4" addresses every other data element</li>
            <li value="3">And so on...</li>
        </ul>
        <p class="Body">Most SAL functions will accept             <![CDATA[ ]]><a name="kanchor11"></a>negative address strides. However:</p>
        <ul>
            <li value="1">Negative address strides can reduce performance on some target platforms</li>
            <li value="2">Negative address strides can <a name="kanchor12"></a>change a function’s arithmetic operation</li>
        </ul>
        <p class="Body">When using negative address strides, always verify that pointer arguments point to appropriate starting locations for striding "backward" through their respective buffers.</p>
        <h3><a name="kanchor13"></a>Memory Elements and Half Elements</h3>
        <p class="Body">A memory element is a contiguous unit of memory that contains a single vector or matrix element of a given type.  </p>
        <p class="Body" style="page-break-after: avoid;">For example:</p>
        <ul>
            <li value="1">An individual <i>float</i> or <i>int</i> vector element constitutes a 4-byte memory element  </li>
            <li value="2">An individual double-precision or single-precision interleaved complex  vector element constitutes an 8-byte memory element </li>
        </ul>
        <p class="Body">Consequently, the real or imaginary part of an interleaved complex element, by itself, is referred to as a <i>memory half-element</i>.</p>
        <p class="Body">Single-precision complex split and double-precision complex  split data is comprised of a pair of floating-point numbers (the real and imaginary parts). The pair is conceptual; each number is stored separately. </p>
        <p class="Body">For complex split types, a memory element is characterized by either the real part or the imaginary part, exclusively.  As a result, for example:</p>
        <ul>
            <li value="1">A single <span style="font-size: 9pt;">SAL_zf32</span> element requires 4-bytes per memory element</li>
            <li value="2">A single <span style="font-size: 9pt;">SAL_zf64</span>element requires 8-bytes per memory element</li>
        </ul>
        <p class="Body">This is different than the "memory half-element" associated with interleaved complex data types.</p>
        <h3><a name="kanchor14"></a>Element Strides</h3>
        <p class="Body">The element stride specifies the number of memory elements  between consecutive vector indexes. Row strides indicate the number of memory elements  between consecutive indexes along each row of a matrix. Column strides indicate the number of memory elements  between consecutive indexes along each column of a matrix; that is, the number of memory elements  between the start of consecutive rows. For vectors and matrices with interleaved complex-type elements, the element stride specifies the number of memory half-elements between consecutive vector or matrix indexes.</p>
        <h3><a name="kanchor15"></a>Total Columns Parameter</h3>
        <p class="Body">The total columns (<i>tcols</i>) parameter is similar to column strides, except that they are always expressed in terms of elements (never half-elements), even for interleaved complex matrices. A <i>tcols</i> parameter should always be greater than or equal to the number of columns in the matrix being processed. When greater, the matrix to be operated on is a sub-matrix contained within a larger matrix having <i>tcols</i> columns, as shown in <a href="#A_sub-matrix_in_a_larger_matrix_with_tcols_columns" target="" title="" alt="" class="MCXref_FigTabExam"><span style="color: DarkBlue;" class="mcFormatColor">Figure 1-1</span></a>.</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_diagram_tcols_427x166.gif" style="width: 427; height: 166;" />
        </p>
        <p class="CaptionNumChap_Figure" MadCap:autonum="&lt;b&gt;Figure 1-1: &lt;/b&gt;"><span class="autonumber"><span><b>Figure 1-1: </b></span></span><a name="A_sub-matrix_in_a_larger_matrix_with_tcols_columns"></a>A sub-matrix in a larger matrix with tcols columns</p>
        <h2><a name="kanchor16"></a>Thread Safety</h2>
        <p class="Body">Except for <a href="../CH13 - Functions - System Control/Code Path Report.htm#sal_get_path" title="sal_get_path()" alt="sal_get_path()">sal_get_path()</a>, all SAL functions are thread-safe.</p>
        <h2><a name="kanchor17"></a>Stack Size</h2>
        <p class="Body">SAL functions require 32 KB of stack memory, minimum. </p>
        <h2><a name="Rounding"></a><a name="kanchor18"></a>Rounding and Field Options in SAL Conversion Functions</h2>
        <p class="Body">The SAL vconvert_*() functions have an <a name="kanchor19"></a><i>rfflag </i>parameter that you can use to specify rounding or field options. These flags are mutually exclusive within their respective groups. However, a rounding option flag and a field option flag can be ORed together.</p>
        <p class="Body">The <b>rounding option flags</b> are:</p>
        <p class="Body1"><code>SAL_ROUND_ZERO</code>
        </p>
        <p class="Body2">Do not round (default).</p>
        <p class="Body1"><code>SAL_ROUND_NEAREST</code> <![CDATA[ ]]></p>
        <p class="Body2">Round up or down to the nearest integer.</p>
        <p class="Body1"><code>SAL_ROUND_UP</code> <![CDATA[ ]]></p>
        <p class="Body2">Round up to the nearest integer.</p>
        <p class="Body1"><code>SAL_ROUND_DOWN</code> <![CDATA[ ]]></p>
        <p class="Body2">Round down to the nearest integer.</p>
        <p class="Body">The <b>field option flags</b> are:</p>
        <p class="Body1"><code>SAL_FIELD_NOSATURATE</code> <![CDATA[ ]]></p>
        <p class="Body2">Write the low-order target-width bits of the converted value to output (default). If the converted value is outside the range for the output data type, the result is undefined.</p>
        <p class="Body1"><code>SAL_FIELD_SATURATE</code> <![CDATA[ ]]></p>
        <p class="Body2">If necessary, saturate the converted value to the nearest boundary value of the output data type.</p>
        <p class="Body">&#160;</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>