<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="10229" MadCap:lastWidth="622" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - Single Vector" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="AYyCzplehrvh7lxR6YCOTCd9lCXxbmfzPswAVTl6+4R5p+3I7x6DuzITW6FOXVEqc9dvDtiYQn3nrpJZW3r9FGlZWy1KgvK8cy+u4LmemHzG1qC1grOzWRQIPBQfBYNGIj9+Vi3aXSP8sGc1BYOMRIUSIqui/HakCq59IubSpzb8yiGyFtFYV0sn/0e2nUNG5uwUcW7Kd0kQBX55Jkj++jghVHFjhPqVklGzxaFH5qLrkO0mRoQGuh4SRt25tsBSdiwc6br7LlQkofpfcew4e44S3IKaA2SreeNMcjpGewc4S7OOdXXdYjECg8K1jK9B9ifbLoNYymhDGCyL0T+x1xlAVRCz56Lm9A1MhpidAoBm2zy7HVRsRA9OHB/oWy+gHECJLtkBslHG/woaqFCA+FMqZahzPkbyiVUycYZtPcGaWS06kTnJ9Q/vqtXeTtVrNv0MFMPq4jX2SQljpHkZANlE6zY0WmICpBtheWOcWZfrdClHSTIdKitcW/GbL7Do+G7IxDIWSP2Q3TaT09wWHwZwjiztEppaGVTb2XcacRecukE8fqfEQk1fbPsOlTUGK5RJ6T/vgniCd87h6CCPyOhwWGRdv2bWPaoEO7hhDaoJqSnGt2TRrEfi5uDc0I3qPR+cYMqJfFO55oV4RUHCfrpuZJsBwbuSa6tV/PZSfrtFs7OLDLNfrQO3Wn4VYPo6zzKOoxshdR8CxhlxahRH38lYPDPzYYxiL64fypClkJ/dsaOGhXRgFqdriE2kpRqs/GFUIRiLCRROC55PNnsOQ8K4k9ubDXkgzB2MBCn2jCn7HCWyQW3zpvMqFld0zFrn/1wruOSizpxw+2cb6ctTXCZf7CZIT2QUi/sy5cAAnNF3TaqgCFseNX1KPwAz0zDcDkNqt2himRKfe3L/nG9SQH273mE1ApEUFpPbI9c9+hzo2KKG+k5kmDmOQ6ZBipzIKRdVM4F7crBcrtKJyKYTOhpB6d6roVc1i06B7j/C2fD/oVe1MpzSYqvfTkYVsgIjWruhE1ZipFoIvOg6zctf3nIsR5xCQQxxJfBH/50q4Rd7Ej2HZgkis/d++2xyA3I1mfxxGvri01xUWu7bhPwSHDMgHGk1MJxIT8nBFjNIBddfLxaUQ0pJlnbZIYah/YM9KhC/FFKsAi3O7+RIVN98/uS4q0TxWBrQnZt+iwnoFFTrpYE9OXXUt0egfYuV9Q032rCMJpdspXUplOt7WE6/7eSFqRemYStyxn9s2yXebQ3jhccXcHrLVQf4n2A0oEFr+FN9gAlk2IGLDCkGZHozWsiS2jQsI9u+xeeTFGG+ZtY7qAG5oVRDdoH1RORo6uprDlKqltDaazA+3wC7Uqckuw==" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Single-Vector Miscellaneous Operations, Integer, Float and Double Precision</title>
        <link href="../Resources/TableStyles/o_NoteIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_CodeIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_NoteIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_CodeIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH07 - Functions - Single Vector/SV Misc Float Dbl.htm" style="">Open topic with navigation</a>
        </p>
        <h1><a name="kanchor406"></a>Single-Vector Miscellaneous Operations, Integer, Float and Double Precision</h1>
        <p class="Body">Single-vector element miscellaneous functions perform operations on (previously unspecified) single vector elements. These functions perform operations such as finding the minimum or maximum element value in a vector, histogramming the elements of a vector, and finding the locations of zero-crossings in a vector.</p>
        <p class="CaptionNumChap_Table" MadCap:autonum="&lt;b&gt;Table 6-10: &lt;/b&gt;"><span class="autonumber"><span><b>Table 6-10: </b></span></span>Float Vector Miscellaneous Functions</p>
        <p>
            <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Basic.css');" class="TableStyle_o_Basic" cellspacing="0">
                <col style="width: 93px;" />
                <col style="width: 108px;" />
                <col style="width: 117px;" />
                <col style="width: 206px;" />
                <thead>
                    <tr>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Integer</th>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Float</th>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Double Precision</th>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColEnd">Description</th>
                    </tr>
                </thead>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#flnzx">flnzx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Find first and last nonzero</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#histx">ihistx</a>, <a href="#ihist32x">ihist32x</a></td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#histx">histx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#histdx">histdx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Histogram</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#unwrap_phasex">unwrap_phasex</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector unwrap phase</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vavexpx">vavexpx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector exponential average</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vavlinx">vavlinx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector linear average</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vlintx">vlintx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector linear interpolation</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vqintx">vqintx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector quadratic interpolation</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vrsumx">vrsumx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector running sum integration</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vsimpsx">vsimpsx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Simpson integration</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vsortix">vsortix</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector in-place indexed sort</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vsortx">vsortx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector in-place sort</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vtabix">vtabix</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vtabidx">vtabidx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector interpolation, table lookup</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vtrapzx">vtrapzx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep">&#160;</td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector trapezoidal integration</td>
                </tr>
            </table>
        </p>
        <h2><a name="kanchor407"></a>Find First and Last Non-zero</h2>
        <p class="API_name"><a name="flnzx"></a><a name="kanchor408"></a>flnzx()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 57px;" />
            <col style="width: 151px;" />
            <col style="width: 292px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>flnzx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *c,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count (32-bit elements) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The flnzx() function stores the zero-based index of the first non-zero value of vector <i>A </i>in scalar <i>b </i>and stores the index of the last non-zero value of vector <i>A </i>in scalar <i>c</i>. Both indices reflect address stride <i>i </i>so that <i>b </i>or <i>c </i>can be used unchanged as an offset into vector A. If vector <i>A </i>is all zeros, flnzx() sets <i>b </i>and <i>c </i>to n*i.</p>
        <h2><a name="kanchor409"></a>Histogram with Clipping</h2>
        <p class="API_name"><a name="histx"></a><a name="kanchor410"></a>histx(), <a name="histdx"></a><a name="kanchor411"></a>histdx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_17.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 115px;" />
            <col style="width: 330px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>histx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* histogram output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 nb,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* number of output bins */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *max,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, maximum value */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *min,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, minimum value, max &gt; min */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>histdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* histogram output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 nb,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* number of output bins */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *max,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, maximum value */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *min,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, minimum value, max &gt; min */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The histx() and histdx() functions compute a histogram of vector <i>A </i>and add the results to the histogram in vector <i>C</i>. These functions add 1 to the element, or bin, of histogram vector <i>C </i>for each element in vector <i>A </i>whose value falls into the range of that bin.</p>
        <p class="BodyLeadIn">Inputs from vector <i>A </i>are evaluated by a linear equation that determines the proper output bin. </p>
        <ul>
            <li value="1">If an input value is less than <i>min</i>, then the lowest bin of the histogram (index <span style="font-family: serif;">0</span>) is incremented. </li>
            <li value="2">If an input value is greater or equal to <i>max</i>, then the highest bin of the histogram is incremented (index nb-1).</li>
        </ul>
        <p class="Body">These functions can be done out-of-place only.</p>
        <p class="Body">The histx() and histdx() functions do not initialize the histogram vector <i>C</i>, therefore, they can continue updating an existing histogram. To initialize a histogram vector, use <a href="SV_generation.htm#vclrx">vclrx()</a> before calling histx(), or <a href="SV_generation.htm#vclrdx">vclrdx()</a> before histdx().</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="SV_generation.htm#vclrx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vclrx(), vclrdx()</i></span></a>
        </p>
        <h2><a name="kanchor412"></a>Histogram</h2>
        <p class="API_name"><a name="ihistx"></a><a name="kanchor413"></a>ihistx(), <a name="ihist32x"></a><a name="kanchor414"></a>ihist32x()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_18.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 155px;" />
            <col style="width: 290px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>ihistx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui16 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">char *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>ihist32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui16 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The ihistx() and ihist32x() functions compute a histogram of vector <i>A </i>and add the results to the histogram in vector <i>C</i>. The ihistx() and ihist32x() functions increment each bin in vector <i>C </i>for each element in vector <i>A </i>whose value falls into the range of that bin. Function ihist32x() uses 32-bit output bins. Inputs from vector <i>A </i>are evaluated by a linear equation that determines the proper output bin. These functions can only be done out-of-place.</p>
        <p class="Body">The ihistx() and ihist32x() functions do not initialize histogram vector <i>C</i>, therefore, they can continue a histogram. To initialize a histogram vector, use <a href="SV_generation.htm#vclrx">vclrx()</a>.</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="SV_generation.htm#vclrx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vclrx(), vclrdx()</i></span></a>
        </p>
        <h2><a name="kanchor415"></a>Unwrap Phase</h2>
        <p class="API_name"><a name="unwrap_phasex"></a><a name="kanchor416"></a>unwrap_phasex()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_23.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>unwrap_phasex</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input of phase angles */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector of unwrapped phase angles */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* vector element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="2">SAL_unwrap_phase_state *state_ptr,</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* continuation structure */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 flag</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* SAL_UNWRAP_PHASE_(START/CONTINUE) flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The unwrap_phasex() function corrects the radian phase angles in the input vector. When the absolute differences in consecutive input values exceed the threshold of <i>pi</i>, the function compensates by adjusting the difference by 2<i>pi</i>, smoothing the data and normalizing the transition between the input elements.</p>
        <table class="TableStyle_o_Note" style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">The function assumes that consecutive input phase angles differ by no more than 2<i>pi</i>. Otherwise, the results might be inaccurate.</td>
                </tr>
            </tbody>
        </table>
        <p class="Body">The function has two modes of operation:</p>
        <p class="Body1" style="font-weight: bold;">Simple Call</p>
        <p class="Body1">One call per input vector. Do not define the <code>SAL_unwrap_phase_state </code>structure. Pass <code>NULL </code>as the structure pointer. The flag is ignored.</p>
        <table class="TableStyle_o_CodeIndent" style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_CodeIndent.css');" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_CodeIndent_Body_0_0_RowEnd_ColEnd">unwrap_phasex(IN, 1, OUT, 1, count, NULL, 0, 0);</td>
                </tr>
            </tbody>
        </table>
        <p class="Body1" style="font-weight: bold;">Continuous Calls</p>
        <p class="Body1">Multiple calls to blocks of contiguous data. Provide a pointer to the <code>SAL_unwrap_phase_state </code>structure and the flag parameter. Set the flag to <code>SAL_UNWRAP_PHASE_START </code>on the first call and to <code>SAL_UNWRAP_PHASE_CONTINUE </code>on the subsequent calls.</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_CodeIndent.css');" class="TableStyle_o_CodeIndent" cellspacing="0">
            <col style="width: 172px;" />
            <col />
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">SAL_unwrap_phase_state</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">phase_st;</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">int</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">flag;</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">int</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">loopcount;</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep" colspan="2">flag = SAL_UNWRAP_PHASE_START;</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep" colspan="2">for ( loopcount=0; loopcount&lt;totalloops; loopcount++ )</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">{</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">/* get_input_data(IN, elemcount); */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">unwrap_phasex(IN, 1, OUT, 1, elemcount, &amp;phase_st, flag, 0);</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">flag = SAL_UNWRAP_PHASE_CONTINUE;</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep" colspan="2">/* use_output_data(OUT, elemcount); */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColSep">}</td>
                <td class="TableStyle_o_CodeIndent_Body_0_0_RowSep_ColEnd">&#160;</td>
            </tr>
        </table>
        <table class="TableStyle_o_NoteIndent" style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_NoteIndent.css');" cellspacing="0">
            <col style="width: 488px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_NoteIndent_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_NoteIndent_Body_0_0_RowEnd_ColEnd">Do not use the <code>SAL_unwrap_phase_state</code> structure in combination with the <code>SAL_UNWRAP_PHASE_CONTINUE</code> flag on the first call.</td>
                </tr>
            </tbody>
        </table>
        <h2 style="margin-left: 0.5in;page-break-before: auto;page-break-after: auto;"><a name="kanchor417"></a>Vector Exponential Average</h2>
        <p class="API_name"><a name="vavexpx"></a><a name="kanchor418"></a>vavexpx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_24.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 150px;" />
            <col style="width: 295px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vavexpx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vavexpx() function recalculates the approximate exponential average of input-output vector <i>C</i> to include input vector <i>A</i> discounted by a factor of <i>b</i>.</p>
        <h2><a name="kanchor419"></a>Vector Linear Average</h2>
        <p class="API_name"><a name="vavlinx"></a><a name="kanchor420"></a>vavlinx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_25.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 165px;" />
            <col style="width: 280px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vavlinx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vavlinx() function recalculates the linear average of input-output vector <i>C</i> to include input vector <i>A</i>. Input scalar <i>b</i> specifies the number of vectors included in the current average.</p>
        <h2><a name="kanchor421"></a>Vector Linear Interpolation Between Neighboring Values</h2>
        <p class="API_name"><a name="vlintx"></a><a name="kanchor422"></a>vlintx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_26.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vlintx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; indices for A, 0 &lt;= trunc(B) &lt;= m-2 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 j,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for B */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real output count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* length of A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vlintx() function generates vector <i>C</i> by interpolating between neighboring values of vector <i>A</i> as defined by index vector <i>B</i>. For each output value, the integer portion of its corresponding zero-based index in <i>B</i> provides a pointer to the lower element of a pair of interpolation values from vector <i>A</i>. The next sequential element of <i>A</i> is used as the upper element of the pair, from which an output value is derived by linear interpolation.</p>
        <p class="Body">Argument <i>m</i> acts as a placeholder for the call; vlintx() ignores its value. The integer parts of the inputs from <i>B</i>, however, must be greater than or equal to zero and less than or equal to <i>m</i>–2.</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="../CH09 - Functions - Vector_to_Vector/V2V_math_float.htm#vintbx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vintbx()</i></span></a>
        </p>
        <h2><a name="kanchor423"></a>Vector Quadratic Interpolation</h2>
        <p class="API_name"><a name="vqintx"></a><a name="kanchor424"></a>vqintx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_27.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 107px;" />
            <col style="width: 338px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vqintx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* indices vector, 0 &lt;= trunc(b) &lt;= m-2 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 j,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for B */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real output count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* length of A, m &gt;= 3 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vqintx() function interpolates values based on vector <i>A</i> according to indices from vector <i>B</i>. Argument <i>m</i> acts as a placeholder for the call; vqintx() ignores its value. The integer parts of the inputs from <i>B</i>, however, must be greater than or equal to one and less than or equal to <i>m</i>–2. This function can only be done out-of-place.</p>
        <h2><a name="kanchor425"></a>Vector Running Sum Integration</h2>
        <p class="API_name"><a name="vrsumx"></a><a name="kanchor426"></a>vrsumx()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 167px;" />
            <col style="width: 278px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vrsumx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vrsumx() function integrates vector <i>A</i> using a running sum from vector <i>C</i>. Vector <i>A</i> is weighted by scalar <i>b</i> and added to the previous output point. The first element from vector <i>A</i> is not used in the sum.</p>
        <h2><a name="kanchor427"></a>Simpson Integration</h2>
        <p class="API_name"><a name="vsimpsx"></a><a name="kanchor428"></a>vsimpsx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_28.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 162px;" />
            <col style="width: 283px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vsimpsx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vsimpsx() function integrates vector <i>A</i> using Simpson integration. Scalar <i>B</i> specifies the integration step size. This function can only be done out-of-place.</p>
        <h2><a name="kanchor429"></a>Vector In-place Sort</h2>
        <p class="API_name"><a name="vsortx"></a><a name="kanchor430"></a>vsortx(), <a name="vsortix"></a><a name="kanchor431"></a>vsortix()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 56px;" />
            <col style="width: 144px;" />
            <col style="width: 309px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vsortx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input/output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* sort order flag, 1(ascending) or -1 (descending) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vsortix</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input/output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* indices vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *D,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* temporary vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* sort order flag, 1(ascending) or -1 (descending) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vsortx() and vsortix() functions perform an in-place heap sort of a floating point vector in the order specified by parameter <i>f</i>.</p>
        <p class="Body">The vsortx() function sorts the input/output vector, giving sorted output as <i>C</i>[i]. For vsortx(), if <i>f</i> equals 1, the vector is sorted in increasing order. If <i>f</i> equals –1, the vector is sorted in decreasing order. Other values of <i>f</i> are undefined.</p>
        <p class="Body">The vsortix() function generates the indices vector, giving sorted output as <i>C</i>[<i>B</i>[i]]. For vsortix():</p>
        <p class="Body1" style="margin-bottom: 4pt;">if index<span style="font-family: serif;">0</span> = <i>B</i>[i] and index1 = <i>B</i>[j], then:</p>
        <p class="Body1">if f =1, <i>C</i>[index<span style="font-family: serif;">0</span>] &lt;= <i>C</i>[index1] for all i &lt; j     and</p>
        <p class="Body1">if f =–1, <i>C</i>[index<span style="font-family: serif;">0</span>] =&gt; <i>C</i>[index1] for all i &lt; j</p>
        <p class="Body">The vsortix() function sorts the indices according to the values. It leaves the input vector unchanged, unlike vsortx().</p>
        <p class="Body">For vsortix(), vector <i>B</i> must be initialized with the values of the indices, <span style="font-family: serif;">0</span> to <i>n</i>–1. This can be done with vrampix(). If <i>n</i> is greater than 512, temporary vector D must be allocated. In this case, vector <i>D</i> must have a length of 3*(<i>n</i>/512) if n is evenly divisible by 512, or 3*(<i>n</i>/512+1) otherwise.</p>
        <h2><a name="kanchor432"></a>Vector Interpolation, Table Lookup</h2>
        <p class="API_name"><a name="vtabix"></a><a name="kanchor433"></a>vtabix(), <a name="vtabidx"></a><a name="kanchor434"></a>vtabidx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_29.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 148px;" />
            <col style="width: 297px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vtabix</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, scale factor */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, base offset */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector, lookup table*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* lookup table size */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vtabidx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, scale factor */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, base offset */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector, lookup table*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* lookup table size */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vtabix() and vtabidx() functions evaluate elements of vector <i>A</i> for use as offsets into vector <i>B</i>. Vector <i>B</i> is a zero-based lookup table supplied by the caller that generates output values for vector <i>C</i>. </p>
        <p class="Body">The vtabix() and vtabidx() functions use linear interpolation to compute output values when offsets do not evaluate integrally. Scale factor <i>f</i> and base offset <i>g</i> map the anticipated range of input values to the range of the lookup table and are typically assigned values so that:</p>
        <p class="Body1"><b>floor</b>(f * minimum input value + g) = <span style="font-family: serif;">0</span></p>
        <p class="Body1"><b>floor</b>(f * maximum input value + g) = m–1</p>
        <p class="Body">Input values that evaluate to zero or less derive their output values from table location zero. Values that evaluate beyond the table, greater than m–1, derive their output values from the last table location. For inputs that evaluate integrally, the table location indexed by the integral is copied as the output value. All other inputs derive their output values by interpolation between the two table values surrounding the evaluated input.</p>
        <h2><a name="kanchor435"></a>Vector Trapezoidal Integration</h2>
        <p class="API_name"><a name="vtrapzx"></a><a name="kanchor436"></a>vtrapzx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_30.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 158px;" />
            <col style="width: 287px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void vtrapzx(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vtrapzx() function estimates the integral of vector <i>A</i> using the trapezoidal rule. Scalar <i>b</i> specifies the integration step size. This function can only be done out-of-place.</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>