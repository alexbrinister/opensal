<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="753" MadCap:lastWidth="654" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - Single Vector" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="Kv4y7zAgpqgOPyLeB+A6rfP5zKMm6TeEgws4l/tcliWoNW5ns1kPEuRVin5wYJKhJQbQ/YhHPDIojqq1kGIdjsPOT9JFTBk20ruWzUx38MatCBRWtni1WcUpYyNZNbLUUk8ucWLvbOhKoeBUUErRVN2xRlxkpp/wiOg3xuc147jmiFzde4KdF1CtMAgalybE01+RkVXdtDBXdcgL9ededZdkvhGTL4NU5Tl3QIvsWQdRfoD763AwXopVIVcexL9Pyb/WVGlzTaX2bkTjfULM7yOZl0U7A81nlr8W8oIdM4nMF5xl0jEnvb28y2MLBNbGeEgpcpmsI9p1D2/CcGe7JRLEr8eutMvH5s1oSDfCAjOmZl8CJu0b+Xs9HzVNo2b27VPIY+y9Z56nkDZnS3tsMLeIAFHma+WmFsfniA1EOl3sNTUULfc95wi8f+2RGkAJj6cYAek2cVr47cXmdstdIYZ2it2r9awNdC7jt4868yR0PHpjXucq2+R7QPdwN8sZmUWpk18V0IFOUc7boEaLgm5atlke/legaM5w9W72T272Gu/GbGvBaPmzPgArEYthc5VJa+C5u3x7jwAXyhKxcHPnr/W8eHUU0b6UayINb92Go6xhfoiqwboXU1SdhVw0DsjDbnVI1phpdvUasqOBDfeABd2OLHsGok4roknjd4IakF1bc/+iwwDZyLY4TZJp+nbJwB7xf1boNzxJQqBoln0jKntYyF2TrCpCtlyNMGp6wXowGDUnRQ0G9tuGlz0E7Ej9mPP9kRW4Vy2L2YC41XEQXwxSXAi8xnsUFDP5y9ZkHTWmICRdske9MU/kr2Jxcgz1B9RkWG1gSssCBGrxtuYoZKxaVIZUgQjOSLJ/O+pAHCM6javhmBufHU1LFx/8T2WcWy/PMXUVI1NcsRbkEc3BDrGoWMk/bxfZsTzecAwN6SeQlKm0CzYskY2MkfuXU+8WHocpI2oQW6w/9gjV215qg67XUktmYICM0SizYtbN2gHDdY5Nqkk1RW7JMw1RWQaScgqFTwOs2atXEujTTVWDtP2RfYubt/xzmHeHC+En0sjiLF+73FUi3XtquTEHQvfNaPT/ncNwR74bVAy2reLoDuYfXUXHVNRY70S8smgc7TiYZggUdA1/rJPq+oGMAaUb2LY81f37qMYSo7QE+oPkJWLXki3VhCCRzV3BJWv6S+tgOE6efZpwqqla+KFS9UA0SGOBSy8U8jWxL+uuKABlGUapPB3H7mHNyeETZnK1F+Nkn/ERMvBDTNtsw+HyDxWdrF9hqZBIZR95L0z9xcVMrNqjxoir+8dQ7DhOoyEDmQl1CPkbUvHHwON+mKoP6OgS+htFolOd6NTdjteF+w==" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Single-Vector Miscellaneous Operations, Complex</title>
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH07 - Functions - Single Vector/SV Misc Complex.htm" style="">Open topic with navigation</a>
        </p>
        <h1 style="page-break-before: auto;page-break-after: auto;"><a name="kanchor437"></a>Single-Vector Miscellaneous Operations, Complex</h1>
        <p class="Body">Single-vector element miscellaneous functions perform operations on (previously unspecified) single vector elements. These functions perform operations such as finding the minimum or maximum element value in a vector, histogramming the elements of a vector, and finding the locations of zero-crossings in a vector.</p>
        <p class="CaptionNumChap_Table" MadCap:autonum="&lt;b&gt;Table 6-11: &lt;/b&gt;"><span class="autonumber"><span><b>Table 6-11: </b></span></span>Complex Vector Miscellaneous Functions</p>
        <p>
            <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Basic.css');" class="TableStyle_o_Basic" cellspacing="0">
                <col style="width: 148px;" />
                <col style="width: 115px;" />
                <col style="width: 236px;" />
                <thead>
                    <tr>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Complex Interleaved</th>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Complex Split</th>
                        <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColEnd">Description</th>
                    </tr>
                </thead>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#cexpmulx">cexpmulx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#zexpmulx">zexpmulx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Complex exponential table multiply</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#cexptabx">cexptabx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#zexptabx">zexptabx</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Complex exponential table create</td>
                </tr>
            </table>
        </p>
        <h2><a name="kanchor438"></a>Vector Multiply by Sine and Cosine, Real to Complex</h2>
        <p class="API_name"><a name="cexpmulx"></a><a name="kanchor439"></a>cexpmulx(), <a name="zexpmulx"></a><a name="kanchor440"></a>zexpmulx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_15.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cexpmulx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A, I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, frequency */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output scalar, phase */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C, K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *CS,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* cosine-sine vector, cexptabx() output */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 log2m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* log2 of cosine-sine element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real output count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>zexpmulx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *f,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar, frequency */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output scalar, phase */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *CS,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* cosine-sine vector, zexptabx() output */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 log2m,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* log2 of complex unit circle divisions */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real output count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The cexpmulx() and zexpmulx() functions multiply vector <i>A</i> by the cosine and sine of a linearly increasing variable <i>omega</i> to create complex vector <i>C</i>. Input vector <i>CS</i> is the output vector of function cexptabx() or zexptabx(), which must be called prior to calling this function.</p>
        <p class="Body">Linear variable <i>omega</i> is calculated for the <i>n</i><sup>th</sup> input from vector <i>A</i> so that:</p>
        <p class="Body1"><i>omega</i> = <i>n</i> * <i>f</i> <![CDATA[ ]]><i>+ g</i></p>
        <p class="Body">Sine and cosine values are taken from the weights table entry nearest to <i>omega</i>. If <i>omega</i> does not evaluate integrally, no interpolation is performed between surrounding table entries.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">N</p>
        <p class="Body1">Element count specified in the call to cexptabx() or zexptabx().</p>
        <p class="Parameter">f</p>
        <p class="Body1">Input scalar that specifies the frequency in radians.</p>
        <p class="Parameter">g</p>
        <p class="Body1">Input/output scalar that specifies the phase for the first output point in radians.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <h2><a name="kanchor441"></a>Create Table of Complex Exponentials</h2>
        <p class="API_name"><a name="cexptabx"></a><a name="kanchor442"></a>cexptabx(), <a name="zexptabx"></a><a name="kanchor443"></a>zexptabx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_16.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 122px;" />
            <col style="width: 330px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cexptabx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector, 8-byte-aligned */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 log2M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* log2 of divisions of complex unit circle */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved, specify 0 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>zexptabx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 log2M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">
                    <p style="mc-short-line-method: tighten;">/* log2 of divisions of complex unit circle */</p>
                </td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved, specify 0 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The cexptabx() and zexptabx() functions build a table of complex exponentials for functions that require this table. Before calling the cexpmulx() or zexpmulx() functions, your program must call cexptabx() or zexptabx() at least once. A single call to one of these functions can serve a series of functions if <i>M</i> is large enough for each function called and the array of exponentials is preserved. Functions that use the array of exponentials automatically adjust strides through the array when the table has greater resolution, or a larger <i>M</i> than required.</p>
        <p class="Body">Count <i>M </i>represents the number of divisions of the complex unit circle, specifying the largest number of elements that can be processed by a subsequent frequency-domain function. Count <i>M </i>must be a power of 2 and must equal or exceed the number of elements that the functions process using the weights array.</p>
        <p class="Body">Parameter <i>n</i> is reserved, specify <span style="font-family: serif;">0</span>.</p>
        <p class="Body">When allocating memory for building a weights array, keep in mind that these functions generate complex numbers, so allocate two <code>sizeof(float)</code> words per element.</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>