<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="736" MadCap:lastWidth="654" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - Data Conversion" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="VKnl9d4XdV6Oxz1EKxqsTrR0ks1Uah/05p1k+pizW5p+W8Qdguc9U7zdbF7UHv09vSSY/JyQymjidToQWJfvmJrSxdbnFceikOCccmpdmpoBoLOFcf22M8NzNmiaQpFm0GmSXiEjG/PMkU+NLGpZ+C7pNu5D1rlgFCUMde/WyNZmPTD65xSoQRemaP54G+USS8JxW/QsUbhk3skK1e8S/xvjgvTjPiLKte+2pNzp7PtZVY1ExcBNO6Qa60Q4AC5zTN3LDScWpXzJvhNQ0olRGPmBngDapLEjH20kDLn5vyN8GFqaZXatv8jHJrNRL5dN7xfxW6npNWrp0U8Z2yV02E+67+jKtN+3y6gg/U0pRkZNGzohdia1sLK2VT5erKcmMq24d6Ztw5qzDzuNX6+GYvlhxwQz9I6IZ/W2aJKoKOKqM6tb1DnC5jrrAVuLy7nH7PnNLgeBgioh3hnL+upEScygQuJBfOJf8zabSAfGnb5UMUzIbcIG5M+v5d1UDPUojJCq9ZXoMZBZFB1yS1rqWf1x6mqbNeAXSWcLw9tHv2NO3KVA7xFsA5mbjuMR9iim5iD/vzpKJOA35xz/cgRp4wOoBxosVCyJ/V6AdGkL/EmY8sj9RLA1N4yw71A3lO76idy57yhqsMv20z+KeuIUQVAt4cMifdUvsFettxcI62NpbAefTw3CrZWi2U4apzxVdMHJ7deGJym2PCMCpVL8sS3zw915JOcpIZAUlR+BneIT83ip/jTPJ0+gmuq24uwBagiGAx4fTIy45sdv+dBNEhPtRDLfVoQoaHsdqSb95i8OqZfDZOkQQY5Gqa5M1SePjIKf6x5ELL9ydjY5mEJ/A0eUdTWBKSXE5W//j6Z5+Nrm89hvcs1KuXmmV6sa6DfutdVPYJxgE4ycfh8R8mVfcGy+VUpYFECMdB6hDji6lA8IyHnhfX3mDON99KeE3uPctnqklSwxIpvx+Lt/q2bK3B3f50ZKIxgIIGjnrA01dL+LhOkAGgduFGYJ9ZP97Bw3NQJeSuwzKKV5ro/SpAx7mj3Q8HL75DU2tmZhYYQjZDlYvfjg2ejgpstT+5J/iJVKmMfeSUYvYaZFJmlp5sMbUASQeSJou7fmiz+L1wxROFjQpNJnGO8EV7mU2D4lOyLmG41Lumtp/ApxcQHqRM2o/1hRzrme2F3oQEtyaxSQNMqET/0kQQjGbdGWdIiiN5RUelQpWYzzLuZvknPhl+5HNdCe5iPJxLhtja4Dxs47IkoM6eoxEGmYAehszncSAFpCWjJVHETejxSr8RjjkwXQyPWBOr3aO0gJuD50qSyP6XqsBCf/tUvujlZVBUWL3UQJKRF44ejs2+EF8jEVISBijA==" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Complex Interleaved-to-Split Conversion Functions</title>
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH06 - Functions - Data Conversion/Complex_interleaved_split.htm" style="">Open topic with navigation</a>
        </p>
        <h1><a name="kanchor165"></a>Complex Interleaved-to-Split Conversion Functions</h1>
        <p class="Body">Complex interleaved-to-split conversion functions convert complex interleaved data to complex split data.</p>
        <p class="CaptionNumChap_Table" MadCap:autonum="&lt;b&gt;Table 5-4: &lt;/b&gt;"><span class="autonumber"><span><b>Table 5-4: </b></span></span>Complex Interleaved-to-Split Conversion Functions</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Basic.css');" class="TableStyle_o_Basic" cellspacing="0">
            <col style="width: 132px;">
            </col>
            <col style="width: 354px;">
            </col>
            <thead>
                <tr>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Function</th>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColEnd">Description</th>
                </tr>
            </thead>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#ctozdx">ctozdx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Interleaved to split complex, double</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#ctozx">ctozx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Interleaved to split complex</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#cvsplitx">cvsplitx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector split (create complex vector)</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#cvsplitdx">cvsplitdx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector split, double (create complex vector)</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cs8_zf32x">vconvert_cs8_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector signed 8-bit integer interleaved to 32-bit float split</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cs16_zf32x()">vconvert_cs16_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector signed 16-bit integer interleaved to 32-bit float split</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cs32_zf32x">vconvert_cs32_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector signed 32-bit integer interleaved to 32-bit float split</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cu8_zf32x">vconvert_cu8_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector unsigned 8-bit integer interleaved to 32-bit float split</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cu16_zf32x">vconvert_cu16_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector unsigned 16-bit integer interleaved to 32-bit float split</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_cu32_zf32x">vconvert_cu32_zf32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector unsigned 32-bit integer interleaved to 32-bit float split</td>
            </tr>
        </table>
        <h2><a name="kanchor166"></a>Copy Interleaved Complex Vector to Split Complex Vector</h2>
        <p class="API_name"><a name="ctozx"></a><a name="kanchor167"></a>ctozx(), <a name="ctozdx"></a><a name="kanchor168"></a>ctozdx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_14_83x24.jpg" style="width: 83; height: 24;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 54px;" />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>ctozx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A, I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* complex element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>ctozdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A, I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* complex element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The ctozx() and ctozdx() functions copy the contents of an interleaved complex vector to a split complex vector.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Complex_split_interleaved.htm#ztocx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>ztocx(), ztocdx()</i></span></a>
        </p>
        <h2><a name="kanchor169"></a>Split a Complex Vector into its Real and Imaginary Parts</h2>
        <p class="API_name"><a name="cvsplitx"></a><a name="kanchor170"></a>cvsplitx(), <a name="cvsplitdx"></a><a name="kanchor171"></a>cvsplitdx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_13_226x26.jpg" style="width: 226; height: 26;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table class="TableStyle_o_Code" style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" cellspacing="0">
            <col style="width: 171px;" />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColSep">
                        <p style="margin-bottom: 2pt;">void <b>cvsplitx</b>(</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_cf32 *A,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 I,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_f32 *B,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 j,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_f32 *C,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 k,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 n,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 eflag		 );</p>
                        <p style="margin-bottom: 2pt;">void <b>cvsplitdx</b>(</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_cf64 *A,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 I,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_f64 *B,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 j,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_f64 *C,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 k,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 n,</p>
                        <p class="Code1" style="margin-bottom: 2pt;">SAL_i32 eflag );</p>
                    </td>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p class="Code1" style="margin-bottom: 2pt;">&#160;</p>
                        <p style="margin-bottom: 2pt;">					/* input vector */</p>
                        <p style="margin-bottom: 2pt;">					/* address stride for A, I=2i */</p>
                        <p style="margin-bottom: 2pt;">					/* real output vector */</p>
                        <p style="margin-bottom: 2pt;">				/* address stride for B */</p>
                        <p style="margin-bottom: 2pt;">					/* imaginary output vector */</p>
                        <p style="margin-bottom: 2pt;">					/* address stride for C */</p>
                        <p style="margin-bottom: 2pt;">				/* complex element count */</p>
                        <p style="margin-bottom: 2pt;">			/* ESAL flag */</p>
                        <p style="margin-bottom: 2pt;">&#160;</p>
                        <p style="margin-bottom: 2pt;">						/* input vector */</p>
                        <p style="margin-bottom: 2pt;">						/* address stride for A, I=2i */</p>
                        <p style="margin-bottom: 2pt;">					/* real output vector */</p>
                        <p style="margin-bottom: 2pt;">					/* address stride for B */</p>
                        <p style="margin-bottom: 2pt;">						/* imaginary output vector */</p>
                        <p style="margin-bottom: 2pt;">						/* address stride for C */</p>
                        <p style="margin-bottom: 2pt;">						/* complex element count */</p>
                        <p style="margin-bottom: 2pt;">						/* ESAL flag */</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The cvsplitx() and cvsplitdx() functions copy the real and imaginary parts of the input vector into separate floating point vectors. These functions are the inverse of cvcombx() and cvcombdx().</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Complex_split_interleaved.htm#cvcombx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cvcombx(), cvcombdx()</i></span></a>
        </p>
        <h2><a name="kanchor172"></a>Vector Conversion, Interleaved-Complex Signed Fixed-Point to Split-Complex 32-Bit Floating-Point</h2>
        <p class="API_name"><a name="vconvert_cs8_zf32x"></a><a name="kanchor173"></a>vconvert_cs8_zf32x(), <a name="vconvert_cs16_zf32x()"></a><a name="kanchor174"></a>vconvert_cs16_zf32x(), <a name="vconvert_cs32_zf32x"></a><a name="kanchor175"></a>vconvert_cs32_zf32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 54px;" />
            <col style="width: 154px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cs8_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci8 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag   );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cs16_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci16 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag   );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cs32_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_cs8_zf32x(), vconvert_cs16_zf32x() and vconvert_cs32_zf32x() functions take an interleaved-complex, signed, fixed-point vector, convert it into split-complex, 32-bit, floating-point format, then multiply it by <i>scale</i> and add <i>bias</i>. Input vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="Body"><i>I</i> must be even.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="Body">For <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a></p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="#vconvert_cu8_zf32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_cu8_zf32x(), vconvert_cu16_zf32x(), vconvert_cu32_zf32x()</i></span></a>
        </p>
        <p class="Body"><a href="Integers.htm#vconvert_u8_f32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_u8_f32x(), vconvert_u16_f32x(), vconvert_u32_f32x()</i></span></a>
        </p>
        <p class="Body"><a href="Integers.htm#vconvert_s8_f32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_s8_f32x(), vconvert_s16_f32x(), vconvert_s32_f32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_f32_u8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_f32_u8x(), vconvert_f32_u16x(), vconvert_f32_u32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_f32_s8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_f32_s8x(), vconvert_f32_s16x(), vconvert_f32_s32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_zf32_cs8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_zf32_cs8x(), vconvert_zf32_cs16x(), vconvert_zf32_cs32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_zf32_cu8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_zf32_cu8x(), vconvert_zf32_cu16x(), vconvert_zf32_cu32x()</i></span></a>
        </p>
        <h2><a name="kanchor176"></a>Vector Conversion, Interleaved Complex Unsigned Fixed-Point to Split-Complex 32-Bit Floating-Point</h2>
        <p class="API_name"><a name="vconvert_cu8_zf32x"></a><a name="kanchor177"></a>vconvert_cu8_zf32x(), <a name="vconvert_cu16_zf32x"></a><a name="kanchor178"></a>vconvert_cu16_zf32x(), <a name="vconvert_cu32_zf32x"></a><a name="kanchor179"></a>vconvert_cu32_zf32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 144px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cu8_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui8 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cu16_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui16 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_cu32_zf32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A. I=2i */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* reserved */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag);</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">);</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_cu8_zf32x(), vconvert_cu16_zf32x() and vconvert_cu32_zf32x() functions take an interleaved-complex, unsigned, fixed-point vector, convert it into split-complex, 32-bit, floating-point format, then multiply it by <i>scale</i> and add <i>bias</i>. Input vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="Body"><i>I</i> must be even.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="Body">For the <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a></p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="#vconvert_cs8_zf32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_cs8_zf32x(), vconvert_cs16_zf32x(), vconvert_cs32_zf32x()</i></span></a>
        </p>
        <p class="Body"><a href="Integers.htm#vconvert_u8_f32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_u8_f32x(), vconvert_u16_f32x(), vconvert_u32_f32x()</i></span></a>
        </p>
        <p class="Body"><a href="Integers.htm#vconvert_s8_f32x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_s8_f32x(), vconvert_s16_f32x(), vconvert_s32_f32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_f32_u8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_f32_u8x(), vconvert_f32_u16x(), vconvert_f32_u32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_f32_s8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_f32_s8x(), vconvert_f32_s16x(), vconvert_f32_s32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_zf32_cs8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_zf32_cs8x(), vconvert_zf32_cs16x(), vconvert_zf32_cs32x()</i></span></a>
        </p>
        <p class="Body"><a href="Float.htm#vconvert_zf32_cu8x" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vconvert_zf32_cu8x(), vconvert_zf32_cu16x(), vconvert_zf32_cu32x()</i></span></a>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>