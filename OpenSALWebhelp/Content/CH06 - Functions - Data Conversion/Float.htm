<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="7138" MadCap:lastWidth="600" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - Data Conversion" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="UTFei00awYKCPvQvZz84G92wriftLKnhrFrIkoO92m0cAIZMEsEu6kGE22/XKpC4deXDlzfHsUMvNwm+YrFxuaQORaZYa3rhCD5L+Pv3pzP688xQL4LYEveFyteFHJ8kWaLVxx8Ib2Ea9uKBr9fPXZBnTOKV3Fn7b6szZu/pMY7ZhoK2Fi1uV0ZbMIc0C4UABltIg0RfmNUX4yNPmCEzl+JhE4hwvTcstw23BKpERQyI0xpKW7/Oc3iNgxzwYFEKpXa+ULzSqGX/iHW2pPguVIyN+i14Di0c3tuCVPC0rvIKRua/34wHNug0VGZbLx+x5sGRucOSIjkO5S8WjCzKtWV1BaacuJ0Od6lcdGwTSGVinftqBNvyB2MoPhxIqSzo6UelAIY+cSWNanhf7SIvrYKMbZ0eyWhwQYAKnd9yPsgiKoSAYrOxZwxIETDTgqREpjoHhdZDHsPH958Y4BgSXKTCTe8otTVOXAPFMfe2Lw0l2zgIYOp/SM14PU3T9RBy5R1NwKfUUDPQGbIsCGPJE7M5l5fj+vehAswfwUpqA1BzYMVc8BQcrSyG1GXt3AWB5a8G+wkeO0SeOUf2kNXZQ/h09R01MIUr4yVvUn0RDzvYh/PydNXDmqfvFsShZQ8ysWQY/i+SrOjxv6/jfLZ01Jqd1duwQoQIq0J82SPL2Q8sv9Ef5Ox9yEKHDTSr4iBbQT68ywdutAqmifC7WsfrADcd5EfzFgo3Q1qgGNi1+JN8lg6XCJde0e+R540K6FD6k6VANhyikJVuioJNotE27YHu9qCvXZHgDwbynMoWNY+DL2jvS9x/YFxKFVyrvYgJiix99ZuPLTaGQ8SCwylw6o4ykC6S25ptBvcFlH8dn56bniQmwwRHQpi8E2tFGJm8fjSBjRs5gd4ryDaed6O4ddqmn/wUuOaOAvkVkkbxsuxHE2PaF+Q1UqaRNjsjKBRDWrW1q/svrkOUN4zHMPTrMRxZ5Wf5sILc7bK6lQbpezUPOTWYNQASVA7s1Hv6wZDh" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Float Conversion Functions</title>
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH06 - Functions - Data Conversion/Float.htm" style="">Open topic with navigation</a>
        </p>
        <h1 style="page-break-before: auto;page-break-after: auto;"><a name="kanchor126"></a>Float Conversion Functions</h1>
        <p class="Body">Float conversion functions convert float data types to integer data types.</p>
        <p class="CaptionNumChap_Table" MadCap:autonum="&lt;b&gt;Table 5-2: &lt;/b&gt;"><span class="autonumber"><span><b>Table 5-2: </b></span></span>Float Conversion Functions</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Basic.css');" class="TableStyle_o_Basic" cellspacing="0">
            <col style="width: 110px;">
            </col>
            <col style="width: 120px;">
            </col>
            <col style="width: 259px;">
            </col>
            <thead>
                <tr>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Convert Float to</th>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Function</th>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColEnd">Description</th>
                </tr>
            </thead>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep" rowspan="3">Integer 8-bit</td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#fixpixbx">fixpixbx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Fix pixel vector, high-low format</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_s8x">vconvert_f32_s8x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to signed 8-bit, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_u8x">vconvert_f32_u8x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to unsigned 8-bit, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep" rowspan="2">Integer 16-bit</td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_s16x">vconvert_f32_s16x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to signed short, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_u16x">vconvert_f32_u16x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to unsigned short, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep" rowspan="4">Integer 32-bit</td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vscalx">vscalx</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector scale and fix</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_s32x">vconvert_f32_s32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to signed long, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vconvert_f32_u32x">vconvert_f32_u32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector to unsigned long, with scale and bias</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#vfixr32x">vfixr32x</a>
                </td>
                <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Vector double to integer, round</td>
            </tr>
        </table>
        <table class="TableStyle_o_Note" style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 501px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">For information on the double and complex conversion functions, see <a href="Double_precision.htm#top" target="" title="" alt="" class="MCXref_See_NoPrefix"><span style="color: DarkBlue;" class="mcFormatColor"><i>Double Precision Conversion Functions</i></span></a> and <a href="Complex_split_interleaved.htm#top" target="" title="" alt="" class="MCXref_See_NoPrefix"><span style="color: DarkBlue;" class="mcFormatColor"><i>Complex Split-to-Interleaved Conversion Functions</i></span></a></td>
                </tr>
            </tbody>
        </table>
        <h2><a name="kanchor127"></a>Fixed Pixels, High-Low Format</h2>
        <p class="API_name"><a name="fixpixbx"></a><a name="kanchor128"></a>fixpixbx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_06_421x25.jpg" style="width: 421; height: 25;" />
        </p>
        <p class="API_heads" style="page-break-before: always;page-break-after: auto;margin-left: 1in;">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>fixpixbx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32*A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/*input vector*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/*address stride for A*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui8*C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/*4-byte-aligned output vector*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/*real input count*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/*ESAL flag*/</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The fixpixbx()  function converts real vector elements to packed, unsigned 8-bit integers in a high-low format. The fixpixbx() function converts two 32-bit elements at a time, packing pairs of 8-bit results into single 16-bit locations. </p>
        <h2><a name="kanchor129"></a>Vector Conversion, 32-Bit Floating-Point to Signed Fixed-Point</h2>
        <p class="API_name"><a name="vconvert_f32_s8x"></a><a name="kanchor130"></a>vconvert_f32_s8x(), <a name="vconvert_f32_s16x"></a><a name="kanchor131"></a>vconvert_f32_s16x(), <a name="vconvert_f32_s32x"></a><a name="kanchor132"></a>vconvert_f32_s32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 147px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_s8x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">char *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_s16x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i16 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_s32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_f32_s8x(), vconvert_f32_s16x() and vconvert_f32_s32x() functions take a 32-bit floating-point vector, convert it into signed, fixed-point format, then multiply it by scale and add bias. Output vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body">For the <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a>.</p>
        <h2><a name="kanchor133"></a>Vector Conversion, 32-Bit Floating-Point to Unsigned Fixed-Point</h2>
        <p class="API_name"><a name="vconvert_f32_u8x"></a><a name="kanchor134"></a>vconvert_f32_u8x(), <a name="vconvert_f32_u16x"></a><a name="kanchor135"></a>vconvert_f32_u16x(), <a name="vconvert_f32_u32x"></a><a name="kanchor136"></a>vconvert_f32_u32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 143px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_u8x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui8 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_u16x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui16 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_f32_u32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ui32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_f32_u8x(), vconvert_f32_u16x() and vconvert_f32_u32x() functions take a 32-bit floating-point vector, multiply it by scale, add bias, and convert it into unsigned, fixed-point format. Output vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body">For <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a>.</p>
        <h2><a name="kanchor137"></a>Vector Conversion, Split-Complex 32-Bit Floating-Point to Interleaved-Complex Signed Fixed-Point</h2>
        <p class="API_name"><a name="vconvert_zf32_cs8x"></a><a name="kanchor138"></a>vconvert_zf32_cs8x(), <a name="vconvert_zf32_cs16x"></a><a name="kanchor139"></a>vconvert_zf32_cs16x(), <a name="vconvert_zf32_cs32x"></a><a name="kanchor140"></a>vconvert_zf32_cs32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 54px;" />
            <col style="width: 151px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cs8x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci8 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cs16x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci16 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cs32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *a,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for a */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_ci32 *c,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_zf32_cs8x(), vconvert_zf32_cs16x() and vconvert_zf32_cs32x() functions take a split-complex, 32-bit, floating-point vector, convert it into an interleaved-complex, signed, fixed-point format, then multiply it by scale and add bias. Output vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="Body"><i>K </i>must be even.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="Body">For the <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a>.</p>
        <h2><a name="kanchor141"></a>Vector Conversion, Split-Complex 32-Bit Floating-Point to Interleaved-Complex Unsigned Fixed-Point</h2>
        <p class="API_name"><a name="vconvert_zf32_cu8x"></a><a name="kanchor142"></a>vconvert_zf32_cu8x(), <a name="vconvert_zf32_cu16x"></a><a name="kanchor143"></a>vconvert_zf32_cu16x(), <a name="vconvert_zf32_cu32x"></a><a name="kanchor144"></a>vconvert_zf32_cu32x()</p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 146px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cu8x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui8 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cu16x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui16 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>vconvert_zf32_cu32x</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cui32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 K,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C. K=2k */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *scale,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to scale value (NULL=1.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *bias</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to bias value (NULL=0.0) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 n,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 rfflag,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* rounding and field options */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32  eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vconvert_zf32_cu8x(), vconvert_zf32_cu16x() and vconvert_zf32_cu32x() functions take a split-complex, 32-bit, floating-poSAL_i32 vector, convert it into interleaved-complex, unsigned, fixed-point format, then multiply it by scale and adds bias. Output vectors can be 8-, 16-, or 32-bits-long, as indicated in the function name.</p>
        <p class="Body"><i>K </i>must be even.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="Body">For the <i>rfflag </i>specification, see <a href="../CH01 - Introduction/Calling_Conventions.htm#Rounding" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Rounding and Field Options in SAL Conversion Functions</i></span></a>.</p>
        <h2><a name="kanchor145"></a>Vector Scale and Fix</h2>
        <p class="API_name"><a name="vscalx"></a><a name="kanchor146"></a>vscalx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_07_286x31.jpg" style="width: 286; height: 31;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 127px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void vscalx(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *b,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 p,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* precision of output integers (bits), 2 &lt;= p &lt;= 32 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="BodyLeadIn">The vscalx()  function scales and fixes vector <i>A </i>by:</p>
        <ul>
            <li value="1">Scaling each element of <i>A</i> by the largest power of 2 so that, after being multiplied by the magnitude of scalar <i>b</i> and truncated, the result can be expressed as a two's complement integer using <i>p</i> bits.</li>
            <li value="2">Truncating scaled elements to signed 32-bit integers.</li>
        </ul>
        <p class="Body">For example, if scalar <i>b</i> equals the element of vector <i>A</i> with the greatest magnitude, every output value falls between –2.0**(<i>p</i>–1) and 2.0**(<i>p</i>–1).</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Double_precision.htm#vscaldx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vscaldx()</i></span></a>
        </p>
        <h2><a name="kanchor147"></a>Vector Real to 32-bit Integer Convert with Rounding</h2>
        <p class="API_name"><a name="vfixr32x"></a><a name="kanchor148"></a>vfixr32x()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_11_233x25.jpg" style="width: 233; height: 25;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void vfixr32x(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 I,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* element stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real input count*/</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vfixr32x() function converts real values from vector <i>A </i>to 32-bit signed integers and rounds results according to the current processor rounding mode.</p>
        <p class="Body">This function converts input values ranging from –2,147,483,648 to 2,147,483,647 inclusive. Results for input values outside of these ranges are undefined.</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Double_precision.htm#vfixr32dx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vfixr32dx()</i></span></a>
        </p>
        <h2 style="page-break-before: always;page-break-after: auto;margin-left: 0.5in;"><a name="kanchor149"></a>Vector Real to Double Convert</h2>
        <p class="API_name"><a name="vspdpx"></a><a name="kanchor150"></a>vspdpx()</p>
        <p class="Image">
            <img src="../Resources/Images/SAL_funct_equat_08_211x25.jpg" style="width: 211; height: 25;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void vspdpx(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 i,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 k,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* real element count */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The vspdpx() function creates double-precision vector <i>C </i>by converting real inputs from vector <i>A</i>. This function can only be done out-of-place.</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>