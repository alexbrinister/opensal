<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="752" MadCap:lastWidth="654" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="NDf5CZ0rQTZPkVILOH7LFNn/zkJdyGFfGarssVpuBkhY8u79BHRtxGios1F8kRb8b742jHJR+0rkn7cvSTeoMd/+Xda7+WCg115NuY0ICQYE5WjaZIrH0PvjCL2Y8EFT0h3E1NqjJs6GRg+37dOXmtwVoEht6E0OJaCKh7BAydZrtG2aXbusKJw92SBd9KFr8QrUvC9WPilVsDeq3LIpTiq3j4eD8cMg7LvSvF5qd7VcGJSfkk4S6SEzXYLpvJMqVFSt1h/6uf4LMUXmzyCLgSeckuMdR+KwreqsN+6lgGcp8sbNeWRZuOU0BQfI52+PdJ0NIpiVgUgo47/G6AFONSEqDSFPFFJ+wf/OpvVcwggqo8pj+xopBabqH9vtUv+Ze7wF1LSN85+BE9vI0AbOHC1VDIBgB4dgTE22rNEbcLjWIyVyse7WuZxCUd4MB5POfloUgL+tm9EwQPaEAP0v8iecdK0Uio2oP4oRnodOuWTq9wfU86e1nfKhIQDG0Tt4nNMDPP0jvpF5mYqr8YD8esdsZAsDIiIHVRGKsk7X/wCQ92XZyZ+gx3jPA2Ts6l0lOE9xd82Hkmb3IStVy+W+eV6FaIevYAoaahj/Qa9BJ7rHHBCKT526+o4+/WhswFfdLiRO5dFHfL00SIiS5ZVY9Il2FGI053yECQc3wMBDZTg+XtTXAb0UmLYlCilF1KHKSgDGPau0rRsCzzLocZdIe9kEVYIcO60ShIEpGkKX+u9FpNMm5Rsy5Lkvn+i5oN2c1NwSVTmWptqUtjTisb2AWIpt2ZMYy1hFFhsxMb7HaBI0yz9olqgRdZzFaBXq/UNBU3BLz7e7rajxnmqOfQ8Xl9TQHdj/k+LUaZGlRjeqirH39Yba8cOGKUjpt7zlPljsyKgqhhYu0hB0TznJAucKWjIP0krUMc3A32OjHwpC6zBUVu0/uaAtjN5S2nQL+nF9SBSCNMlNptsB2W8pcWwddjQdSYpy3SFXotftPomLvkd7vwK6Arb5ZhY5E4QeW6oGD6mH0JpuwCbAL5xw0AiiptQBVt+A3kIINjkHb6Zy+xKDHRTodbxkjQcxbV3CVPk2DdxWG7ONdXy65TRJ62XM+EwsVvXu4ktm4yiPy35RtHb53jx4oAzH3RVrMEoe7Bhvf0Lp8yrM51SfINBS0SSeht8lLQK+V4BBcxceeTNH3SLjiH9NGNKIB7dNylPuAW2nhPVCJCW4ykVhwpH3g4bCPhxOLKBnHRJU0mb4O9VfgNOH/3rdi0DnOGBoBvZfWYd45PQv4NGuMKNwCrlDCVypAgR7wrufn/ftHjQvWXl42qPKI7HYY+tl5d7JVupQUC+PI8IgEJbVeqUGawjczgt9+A==" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Forward-Backward Substitution (for LU Decomposition)&#160;&#160;</title>
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH10 - Functions - Matrix Math/Forward-Backward Substitution - Complex.htm" style="">Open topic with navigation</a>
        </p>
        <h2><a name="kanchor1204"></a>Forward-Backward Substitution (for LU Decomposition)&#160;&#160;</h2>
        <p class="API_name"><a name="cmatfbsx"></a><a name="kanchor1205"></a>cmatfbsx(), <a name="cmatfbsdx"></a><a name="kanchor1206"></a>cmatfbsdx(), <a name="zmatfbsx"></a><a name="kanchor1207"></a>zmatfbsx(), <a name="zmatfbsdx"></a><a name="kanchor1208"></a>zmatfbsdx()</p>
        <p class="Body">&#160;</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');caption-side: top;width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col>
            </col>
            <col style="width: 135px;">
            </col>
            <col style="width: 366px;">
            </col>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cmatfbsx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* LU-decomposed input matrix */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector of reciprocals */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input permutation vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf32 *D,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 L,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for D, a multiple of 2 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count and row count for A, element count for B, C, D, and P */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cmatfbsdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* LU-decomposed input matrix */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf64 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector of reciprocals */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input permutation vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_cf64 *D,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 L,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for D, a multiple of 2 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count and row count for A, element count for B, C, D, and P */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>zmatfbsx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* LU-decomposed input matrix */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector of reciprocals */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input permutation vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf32 *D,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 l,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for D */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count and row count for A, element count for B, C, D, and P */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>zmatfbsdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* LU-decomposed input matrix */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf64 *B,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector of reciprocals */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input permutation vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_zf64 *D,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* output vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 l,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* address stride for D */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count and row count for A, element count for B, C, D, and P */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The cmatfbsx() and zmatfbsx() functions use forward-backward substitution to solve a set of equations in the form <i>Mx </i>= <i>B</i>, where:</p>
        <ul>
            <li value="1"><i>M </i>represents input matrix <i>A</i></li>
            <li value="2"><i>B </i>represents input vector <i>C</i></li>
            <li value="3"><i>x </i>represents output vector <i>D</i></li>
        </ul>
        <p class="Body">Matrix <i>A </i>is a decomposed input matrix created by  <a href="Matrix LU Decomposition.htm#cmat_lud_decx">cmat_lud_decx()</a> or <a href="Matrix LU Decomposition.htm#zmat_lud_decx">zmat_lud_decx()</a>(). </p>
        <p class="Body">Vector <i>P</i> is a permutation vector created by <a href="Matrix LU Decomposition.htm#cmat_lud_decx">cmat_lud_decx()</a> or <a href="Matrix LU Decomposition.htm#zmat_lud_decx">zmat_lud_decx()</a>. </p>
        <p class="Body">Vector <i>B </i>is a vector of reciprocals, one for each element of the matrix <i>A </i>main diagonal, created by the caller. Therefore:</p>
        <p class="Body1" style="font-family: serif;"><i>B</i>[m] = 1.0/<i>A</i>[m,m] for m ={0, <i>n</i>-1}</p>
        <p class="Body">Vector <i>B </i>can be created from matrix <i>A </i>using <a href="../CH07 - Functions - Single Vector/SV Scientific Complex.htm#cvrcipx">cvrcipx()</a>, <a href="../CH07 - Functions - Single Vector/SV_scalar_math.htm#vrecipx">vrecipx()</a>, or <a href="../CH07 - Functions - Single Vector/SV Scientific Complex.htm#zvrcipx">zvrcipx()</a>, as follows:</p>
        <p class="Body1" style="font-family: serif;">vrecipx (A, n+1, B, 1, n, SAL_NN);</p>
        <p class="Body">This function can be done out-of-place only.</p>
        <p class="RelatedTopics" MadCap:autonum="Related Topics"><span class="autonumber"><span>Related Topics</span></span>&#160;</p>
        <p class="Body"><a href="../CH01 - Introduction/Calling_Conventions.htm#Address_strides" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>Address Strides</i></span></a>
        </p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Matrix LU Solution.htm#mat_lud_solx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>mat_lud_solx(), mat_lud_soldx()</i></span></a>
        </p>
        <p class="Body"><a href="Matrix LU Solution - Complex.htm#cmat_lud_solx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cmat_lud_solx(), cmat_lud_soldx(), zmat_lud_solx(), zmat_lud_soldx()</i></span></a>
        </p>
        <p class="Body"><a href="Matrix LU Decomposition and Condition.htm#mat_lud_decx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>mat_lud_decx(), mat_lud_decdx()</i></span></a>
        </p>
        <p class="Body"><a href="Matrix LU Decomposition.htm#cmat_lud_decx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cmat_lud_decx(), zmat_lud_decx(), cmat_lud_decdx(), zmat_lud_decdx()</i></span></a>
        </p>
        <p class="Body"><a href="../CH07 - Functions - Single Vector/SV Scientific Complex.htm#cvrcipx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cvrcipx(), cvrcipdx(), zvrcipx(), zvrcipdx()</i></span></a>
        </p>
        <p class="Body"><a href="../CH07 - Functions - Single Vector/SV_scalar_math.htm#vrecipx" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>vrecipx()</i></span></a>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>