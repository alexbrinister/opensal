<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="13660" MadCap:lastWidth="600" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="H3hVO6q+T/GhgwUGkak84WI53+nN1i1b53Gg8UTx1yxw7C/3Ymkx49NI8mjDDg4WqPZ0dybhqdAKp0UAkyNz3By9whaok7KJmxIydcwq+o1YZUpfWyC0Xo0/E/q2ygHXF9qa83mg56fbvAMj5+CJjd9yYQV2GcYy5Y3VqoHi+7PYehbRYlJunKAYC8awITShVxaoVY1TfKsZGZjRRu9T0qv5i8YAe5ZMDlkT/keukV36KHtdfbT1SUvtCor4ONyzElu9rzQiOhKformnshP2pWcUsZQ2DxriOaukJzMIcTPlciFJTvbGpKQMXLIHoZUsYXvakkq3Q65W/1k/gxg+onk4H7Sw2+pVcHYkvHgyWqQrw9MDvEbEnNcsxqOQhT3zsD92Cqxyz5OZgpprRfkGzNtRF13qkJyLqC6tTsPj+ezdfIdh3zwCKPWaLNx3WD2XOWEaEl60U+7xHbxDLtWvJ9guWpmmq4S3DYxlhaNcCcyhyKsLRWh7WkbT1IraCWLDvO8beG2WgydpD7yZuhDktdaoxTfx8eV+8xZR/gC1RAHzNQh6DTDoh9rcndVO8FtqSQ/mc1ycy5HkMfQbOUEwJAPOKOe7vIo1ZjLVMpp4q7PGx27dILkxJUtWAbkWJcrSYXA5xNx/Nqy6dSVMImPB+r55g0YK42X0pCEAXlWTD10EphnFhozPQuQOxv+26ThxaP9CWiaGGXL3IW+kDivw7uxsugcTUK5vRFlSmL5zxRmrmmJTCg8CaiZazYKWGDT2LwDFLzjaCt0XBvjGdjpJZLm0mg3FDpigTyV6D9f9RyEHWhhMnLGk9/DM9KcT64tsYmFEf9zoft47iq1GdNH6X8w3vWJSSrtsEpoFbFS52vstuEDEhkjtQs4t9F3ctNXSaNCqtpMa0rrZ3st6GQ2BxHsdbXaPq4qxTIDKD5/AF5LhgmYIhoHvBKObMM2cqvSo9SBcIGMQc6R1eIuyXYHnp4WLCkRmfLmLjh8qDhNKjLnxYguqu6CivFVsNAG8QbLL" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Multi-Core SAL Functions</title>
        <link href="../Resources/TableStyles/o_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Basic.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH04 - MultiCore SAL/MCSAL_functions.htm" style="">Open topic with navigation</a>
        </p>
        <h1><a name="kanchor1181"></a>Multi-Core SAL Functions</h1>
        <p class="Body">MCSAL provides the following functions to manage multi-core SAL:</p>
        <table class="TableStyle_o_Basic" style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Basic.css');" cellspacing="0">
            <col style="width: 197px;" />
            <col style="width: 281px;" />
            <thead>
                <tr>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColSep">Function</th>
                    <th class="TableStyle_o_Basic_Head_0_0_RowSep_ColEnd">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_create">sal_create</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Creates a SAL handle</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_init_">sal_init</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Initializes a SAL handle</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_destroy">sal_destroy</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Destroys a SAL handle</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Sets the waiting behavior (sleeping or polling) for MCSAL worker threads</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_set_worker_wait_behavior">sal_get_worker_wait_behavior</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Gets the waiting behavior (sleeping or polling) for MCSAL worker threads</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_set_n_threads">sal_set_n_threads</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Sets the number of threads that MCSAL can use for multi-threading functions</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_get_n_threads">sal_get_n_threads</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Gets the number of threads that MCSAL can use for multi-threading functions </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_get_n_threads_used">sal_get_n_threads_used</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Gets the number of threads used by the last MCSAL function that was executed</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_get_thread_ids">sal_get_thread_ids</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Gest the MCSAL thread identifiers</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_set_core_affinity">sal_set_core_affinity</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Specifies the number of threads that MCSAL can use for multi-threading functions and the affinity of those threads to processor cores</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColSep"><a href="#sal_get_core_affinity">sal_get_core_affinity</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowSep_ColEnd">Gets the number of MCSAL threads and their affinity to the processor cores</td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Basic_Body_0_0_RowEnd_ColSep"><a href="#sal_print_info">sal_print_info</a>
                    </td>
                    <td class="TableStyle_o_Basic_Body_0_0_RowEnd_ColEnd">Prints information contained in the SAL handle</td>
                </tr>
            </tbody>
        </table>
        <p class="Body">To use multi-core SAL functions, applications must first invoke sal_create(&amp;sal_handle) and sal_init(sal_handle). The create function allocates and returns a SAL handle. The <a href="#sal_init_">sal_init()</a> function creates threads used by the multi-core SAL mathematics functions.</p>
        <p class="Body">For example, on a dual-core processor, one worker thread is created. If the size of the data to process is large enough to benefit from parallel execution, then the work is divided between the manager thread that invoked <a href="#sal_create">sal_create()</a> and <a href="#sal_init_">sal_init()</a> and the worker thread created by <a href="#sal_init_">sal_init()</a>.</p>
        <p class="Body">If the element count is not large enough, MCSAL invokes the single-core version of the function on the manager thread.</p>
        <p class="Body">When a program no longer has to invoke MCSAL functions, it should invoke the sal_destroy(sal_handle). This function causes the worker threads to join with the main thread.</p>
        <h2 style="page-break-before: always;margin-left: 0.5in;"><a name="kanchor1182"></a>Create a SAL Handle</h2>
        <p class="API_name"><a name="sal_create"></a>sal_create()</p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_create (</p>
                        <p>SAL_handle * ph_sal</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_create() function creates a SAL handle. </p>
        <ul>
            <li value="1">If your application defines <code>SAL_ENABLE_MULTICORE</code>, the sal_create() function creates the SAL handle to execute multi-core versions of SAL functions.</li>
            <li value="2">If your application does not define <code>SAL_ENABLE_MULTICORE</code>, the SAL handle is created so that single-core versions of SAL functions are executed.</li>
        </ul>
        <p class="Body">Only one thread in a process can call the sal_create() function. The sal_create() function can be called once only before the <a href="#sal_destroy">sal_destroy()</a> function is called.</p>
        <p class="Body">After calling the sal_create() function, you can call optional sal_set_xxx() functions to modify the behavior of the default attributes of the threads that MCSAL functions will use.</p>
        <p class="Body">After calling <a href="#sal_destroy">sal_destroy()</a>, you can again call the sal_create() function followed by the <a href="#sal_init_">sal_init()</a> function. However, if your application has defined the <code>SAL_ENABLE_MULTICORE </code>macro, you can expect a performance penalty from joining and recreating threads.</p>
        <p class="Body">If your application temporarily requires the MCSAL cores to perform non-MCSAL functions, consider using the <a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior()</a> function.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">ph_sal	 output</p>
        <p class="Body1">Contains the (returned) created <code>SAL_handle </code>object.</p>
        <p class="API_heads" style="page-break-after: avoid;">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2><a name="kanchor1183"></a>Initialize the SAL Handle</h2>
        <p class="API_name"><a name="sal_init_"></a>sal_init ()</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_init (</p>
                        <p>SAL_handle h_sal</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_init () function initializes the SAL handle.</p>
        <p class="Body">If your application defines the <code>SAL_ENABLE_MULTICORE </code>macro, the sal_init() function creates the worker threads and other resources that the MCSAL functions will use.</p>
        <p class="Body">Only one thread in a process can call the sal_init() function.</p>
        <p class="Body">If <code>SAL_ENABLE_MULTICORE </code>is defined, the sal_init() function enables only the multi-core versions of SAL functions.</p>
        <p class="Body">The sal_init() function must be called <i>after</i> the <a href="#sal_create"><a href="#sal_create"><a href="#sal_create">sal_create()</a></a></a> function, and can be called once only between <a href="#sal_create"><a href="#sal_create">sal_create()</a></a> and <a href="#sal_destroy">sal_destroy()</a>.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal	 input</p>
        <p class="Body1">The created, but not initialized, SAL handle.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2 style="page-break-before: always;margin-left: 0.5in;"><a name="kanchor1184"></a>Destroy a SAL Handle</h2>
        <p class="API_name"><a name="sal_destroy"></a>sal_destroy()</p>
        <p class="API_heads">Syntax</p>
        <table style="margin-right: auto;caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 500px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_destroy (</p>
                        <p>SAL_handle * ph_sal</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_destroy() function destroys a SAL handle. If your application defines the <code>SAL_ENABLE_MULTICORE </code>macro, the sal_destroy() function terminates the worker threads and releases other resources used by MCSAL.</p>
        <p class="Body">Only one thread in a process can call the sal_destroy() function. Call the sal_destroy() function only after calling the <a href="#sal_init_">sal_init()</a> function.</p>
        <p class="Body">After calling sal_destroy(), you can again call the <a href="#sal_create"><a href="#sal_create">sal_create()</a></a> function followed by the <a href="#sal_init_">sal_init()</a> function. However, if your application has defined the <code>SAL_ENABLE_MULTICORE </code>macro, you can expect a performance penalty from joining and recreating threads.</p>
        <p class="Body">If your application temporarily requires the MCSAL cores to perform non-MCSAL functions, consider using the <a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior()</a> function.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">ph_sal 	input/output</p>
        <p class="Body1">The SAL_handle to destroy.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2 style="page-break-before: always;margin-left: 0.5in;"><a name="kanchor1185"></a>Set  MCSAL Worker Thread Waiting Behavior</h2>
        <p class="API_name"><a name="sal_set_worker_wait_behavior"></a>sal_set_worker_wait_behavior()</p>
        <p class="API_heads">Syntax</p>
        <table style="margin-right: auto;caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 499px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_set_worker_wait_behavior (</p>
                        <p>SAL_handle h_sal,</p>
                        <p>SAL_i32 flag</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_set_worker_wait_behavior() function sets the waiting behavior (sleeping or polling) for the MCSAL worker threads.</p>
        <p class="Body">If your application defines the <code>SAL_ENABLE_MULTICORE</code> macro, the sal_set_worker_wait_behavior() function sets the worker threads to poll or sleep when it is not executing multi-core enabled SAL functions.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal 	modified</p>
        <p class="Body1">The SAL_handle to modify.</p>
        <p class="Parameter">flag 	input</p>
        <p class="Body1">Sets wait behavior.</p>
        <p class="Parameter">SAL_POLL</p>
        <p class="Body1">Worker threads poll when waiting for work. Default for best performance.</p>
        <p class="Parameter">SAL_SLEEP</p>
        <p class="Body1">Worker threads sleep when waiting for work.</p>
        <p class="API_heads">Performance</p>
        <p class="Body">To ensure best performance, a worker thread polls when waiting for the manager to assign it work. If an application requires the worker-assigned cores for something other than MCSAL, the application can use the sal_set_worker_wait_behavior() function to change the worker waiting behavior from polling to sleeping (and from sleeping to polling).</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2><a name="kanchor1186"></a>Get  MCSAL Worker Thread Waiting Behavior</h2>
        <p class="API_name"><a name="sal_get_worker_wait_behavior"></a>sal_get_worker_wait_behavior()</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_get_worker_wait_behavior (</p>
                        <p>SAL_handle h_sal,</p>
                        <p>SAL_i32 *p_ flag</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_get_worker_wait_behavior() function gets the waiting behavior (sleeping or polling) for the MCSAL worker threads.</p>
        <p class="Body">If your application defines the <code>SAL_ENABLE_MULTICORE </code>macro, the <a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior()</a> function sets the worker thread to poll or to sleep when it is not executing multi-core enabled SAL functions. This allows the application to determine the current worker waiting behavior.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal 	input</p>
        <p class="Body1">The <code>SAL_handle </code>to modify.</p>
        <p class="Parameter">flag	 output</p>
        <p class="Body1">Indicates wait behavior.</p>
        <p class="Parameter">SAL_POLL</p>
        <p class="Body1">Worker threads poll while waiting for work. This is the default startup behavior.</p>
        <p class="Parameter">SAL_SLEEP</p>
        <p class="Body1">Worker threads sleep while waiting for work.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2><a name="kanchor1187"></a>Set Number of Threads for Multi-threading Functions</h2>
        <p class="API_name"><a name="sal_set_n_threads"></a>sal_set_n_threads()</p>
        <p class="API_heads">Syntax</p>
        <table class="TableStyle_o_Code" style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" cellspacing="0">
            <col style="width: 408px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_set_n_threads(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>const SAL_i32 n_threads</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_set_n_threads() function sets the number of threads that MCSAL can use for multi-threading SAL functions. The purpose of this function is to allow you to control the number of threads/cores used by MCSAL. For example, you might want to reserve some cores for another purpose.</p>
        <p class="Body">Only the thread that called <a href="#sal_create">sal_create()</a> can call the sal_set_n_threads() function. The sal_set_n_threads() function must be called <i>after</i> <![CDATA[ ]]><a href="#sal_create">sal_create()</a> and <i>before</i> <![CDATA[ ]]><a href="#sal_init_">sal_init()</a>.  The sal_set_n_threads() function informs MCSAL how many worker threads to create when <a href="#sal_init_">sal_init()</a> is invoked.</p>
        <p class="Body">If your application defines <code>SAL_ENABLE_MULTICORE</code>, you can use sal_set_n_threads() to control the number of threads used by MCSAL functions. If your application does not define <code>SAL_ENABLE_MULTICORE</code>, then sal_set_n_threads() has no effect.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal   modified</p>
        <p class="Body1">Created, but not initialized <code>SAL_handle </code>to modify.</p>
        <p class="Parameter">n_threads   input</p>
        <p class="Body1">The number of threads to be used by MCSAL. This value must be must be:</p>
        <ul>
            <li class="Bullet2" value="1">
                <p>A value that is greater than zero</p>
                <p>- or -</p>
            </li>
            <li class="Bullet2" value="2">
                <p><code>SAL_USE_ALL_CORES</code> <![CDATA[ ]]></p>
                <p>If the number of threads to use is the same as the number of cores available in the system</p>
            </li>
        </ul>
        <p class="Body1">If a value greater than one is supplied as the value of <i> n_threads</i>, then MCSAL creates <code>(n_threads - 1)</code> additional threads.  If one is supplied as the value of  <i>n_threads</i>, MCSAL does not create additional threads.  In this case, when SAL functions are invoked, the code path followed is not the same as that followed by a <code>SAL_SINGLE </code>invocation. Instead, it is the same as when additional threads are available, except all the data is assigned to one thread.</p>
        <p class="API_heads"><a name="kanchor1188"></a>Performance</p>
        <p class="Body">While waiting for the manager to assign it work, a worker thread polls.  Although you can modify this behavior using <a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior()</a>, you should set the number of threads for MCSAL to use to a value that is less than or equal to the number of cores available in your system. </p>
        <p class="Body">The default setting for the number of threads for MCSAL&#160;to use is the <code>SAL_N_THREADS_DEFAULT</code>. This does not mean that every MCSAL function invocation uses that many threads.  Functions will use fewer threads if it benefits performance.  </p>
        <p class="Body">To determine the number of threads that a SAL function has used, invoke the <a href="#sal_get_n_threads_used">sal_get_n_threads_used()</a> function immediately after the SAL function executes. </p>
        <table class="TableStyle_o_Note" style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 100%;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">Alternatively, with the development library, you can obtain the number of threads used through TATL. For more information, see the <i>Trace Analysis Tool and Library (TATL) User Guide</i>.</td>
                </tr>
            </tbody>
        </table>
        <p class="Body">When <a href="#sal_init_">sal_init()</a> is invoked, affinity is assigned to all MCSAL threads, including the thread that invoked <a href="#sal_init_">sal_init()</a>,  the MCSAL manager thread.  If the application must control the affinity of the MCSAL threads, use the <a href="#sal_set_core_affinity">sal_set_core_affinity()</a> function instead.</p>
        <p class="Body">When <a href="#sal_init_">sal_init()</a> is invoked, the threads that MCSAL creates inherit their scheduling policy and priority from the calling thread.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation.  If the operation is not successful, an error code is returned.</p>
        <p class="Related">&#160;</p>
        <p class="Body"><a href="#sal_create" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_create()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_init_" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_init ()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_get_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_get_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_set_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_core_affinity()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_get_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_get_core_affinity()</i></span></a>
        </p>
        <h2><a name="kanchor1189"></a>Get Number of Threads for Multi-threading Functions</h2>
        <p class="API_name"><a name="sal_get_n_threads"></a>sal_get_n_threads()</p>
        <p class="API_heads">Syntax</p>
        <table class="TableStyle_o_Code" style="margin-right: auto;mc-table-style: url('../Resources/TableStyles/o_Code.css');caption-side: top;width: 500px;" cellspacing="0">
            <col style="width: 500px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_get_n_threads(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>SAL_i32 *p_n_threads</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_get_n_threads() function gets the number of threads that MCSAL can use for multi-threading SAL functions. </p>
        <p class="Body">If your application defines <code>SAL_ENABLE_MULTICORE</code>, you can use sal_get_n_threads() to determine the number of threads used by MCSAL functions. If your application does not define <code>SAL_ENABLE_MULTICORE</code>, this function returns the value 1.</p>
        <p class="Body">Only the thread that called <a href="#sal_create">sal_create()</a> should call the sal_get_n_threads() function. The sal_get_n_threads() function must be called <i>after</i> <![CDATA[ ]]><a href="#sal_create">sal_create()</a> and <i>before</i> <![CDATA[ ]]><a href="#sal_destroy">sal_destroy()</a>.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal   input</p>
        <p class="Body1">The created <code>SAL_handle</code>.</p>
        <p class="Parameter">p_n_threads   output</p>
        <p class="Body1">The number of threads for MCSAL to use.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation.  If the operation is not successful, an error code is returned.</p>
        <p class="Related">&#160;</p>
        <p class="Body"><a href="#sal_create" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_create()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_init_" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_init ()</i></span></a>&#160;</p>
        <p class="Body"><a href="#sal_destroy" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_destroy()</i></span></a>&#160;</p>
        <p class="Body"><a href="#sal_set_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_set_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_core_affinity()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_get_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_get_core_affinity()</i></span></a>
        </p>
        <h2><a name="kanchor1190"></a>Get Threads Used by Last Function</h2>
        <p class="API_name"><a name="sal_get_n_threads_used"></a>sal_get_n_threads_used()</p>
        <p class="API_heads">Syntax</p>
        <table class="TableStyle_o_Code" style="margin-right: auto;mc-table-style: url('../Resources/TableStyles/o_Code.css');caption-side: top;width: 500px;" cellspacing="0">
            <col style="width: 501px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_get_n_threads_used(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>SAL_i32 *p_n_threads_used</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">If your application defines the <code>SAL_ENABLE_MULTICORE </code>macro, the sal_get_n_threads_used() function determines the number of threads that were used by the last MCSAL function executed.</p>
        <table class="TableStyle_o_Note" style="margin-right: auto;caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 501px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">
                        <p>The sal_get_n_threads_used() function replaces the <a href="../AppD - Legacy Functions/Get_MCSAL_workers.htm#top">sal_get_n_workers_used()</a> function, which is deprecated.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Body">If a data set is too small, and if using fewer threads will result in better performance, the MCSAL function might not use all of the threads available to it. </p>
        <p class="Body">For example, on a dual-core processor, if the data is not large enough, MCSAL invokes the single-core version of the function on the manager thread. This function returns the value 1 for the number of threads used. </p>
        <table class="TableStyle_o_Note" style="margin-right: auto;caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 499px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">Alternatively, with the development library, you can obtain the number of threads used through TATL. For more information, see the <i>Trace Analysis Tool and Library (TATL) User Guide</i>.</td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal    input</p>
        <p class="Body1">Created and initialized SAL_handle.</p>
        <p class="Parameter">p_n_threads_used   output</p>
        <p class="Body1">The number of threads used by the last MCSAL function.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <h2><a name="kanchor1191"></a>Get the MCSAL Thread Identifiers</h2>
        <p class="API_name"><a name="sal_get_thread_ids"></a>sal_get_thread_ids()</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_get_thread_ids(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>void **pp_thread_ids,</p>
                        <p>SAL_i32 *p_n_threads</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads" style="page-break-before: always;margin-left: 1in;">Description</p>
        <p class="Body">The sal_get_thread_ids() function gets the thread identifiers of threads used by MCSAL.</p>
        <ul>
            <li value="1">If your application defines <code>SAL_ENABLE_MULTICORE</code>, you can use this function to determine the identifiers of threads used by MCSAL.</li>
            <li value="2">If your application does not define <code>SAL_ENABLE_MULTICORE</code>, this function returns the thread identifier of the calling thread.</li>
        </ul>
        <p class="Body">This function must be called <i>after </i><a href="#sal_create">sal_create()</a> and <i>before </i><a href="#sal_destroy">sal_destroy()</a>.  If this function is called after <a href="#sal_create">sal_create()</a>, but before <a href="#sal_init_">sal_init()</a>, it returns the thread identifier of the calling thread only.  If this function is called after <a href="#sal_init_">sal_init()</a>, it returns a list of all MCSAL thread identifiers.</p>
        <p class="Body">Only the thread that called <a href="#sal_create">sal_create()</a> should call sal_get_thread_ids() function.</p>
        <table style="width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" class="TableStyle_o_Note" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">This function allocates memory. It is your responsibility to free this array.</td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal   input</p>
        <p class="Body1">Created <code>SAL_handle</code>.</p>
        <p class="Parameter">pp_thread_ids    allocated/initialized</p>
        <p class="Body1">An array of <i>n_thread</i> thread identifiers.</p>
        <p class="Parameter">p_n_threads   output</p>
        <p class="Body1">The number of threads that may be used by MCSAL.</p>
        <p class="Body1">The thread that is in array element zero is the thread that invoked <a href="#sal_create">sal_create()</a> and this function.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation.  If the operation is not successful, an error code is returned.</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="#sal_create" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_create()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_init_" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_init ()</i></span></a>&#160;</p>
        <p class="Body"><a href="#sal_destroy" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_destroy()</i></span></a>&#160;</p>
        <p class="Body"><a href="#sal_set_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_set_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_core_affinity()</i></span></a>
        </p>
        <h2><a name="kanchor1192"></a>Specify the Number of Threads and Their Affinity</h2>
        <p class="API_name"><a name="sal_set_core_affinity"></a>sal_set_core_affinity()</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_set_core_affinity(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>const SAL_i32 *p_core_affinity,</p>
                        <p>const SAL_i32 n_threads</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_set_core_affinity() function specifies the number of threads that MCSAL can use for multi-threading SAL functions, and the affinity of those threads to processor cores. </p>
        <ul>
            <li value="1">If your application defines <code>SAL_ENABLE_MULTICORE</code>, you can use this function to control the setting of affinity of threads to processor cores.</li>
            <li value="2">If your application does not define <code>SAL_ENABLE_MULTICORE</code>, this function has no effect.</li>
        </ul>
        <p class="Body">The sal_set_core_affinity() function indicates how to set affinity to processor cores for MCSAL threads when <a href="#sal_init_">sal_init()</a> is invoked. This function must be called <i>after </i><a href="#sal_create">sal_create()</a> and <i>before </i><a href="#sal_init_">sal_init()</a>. Only one thread in a process can call sal_set_core_affinity() function; the thread that called <a href="#sal_create">sal_create()</a>.</p>
        <p class="Body">The sal_set_core_affinity() function allows your application to control the number of threads/cores that MCSAL uses. For example, you can specify less than all the cores in the system, then use those non-MCSAL cores for another purpose, while allowing the application to control which cores to use by assigning MCSAL thread affinity. </p>
        <table style="width: 500px;caption-side: top;mc-table-style: url('../Resources/TableStyles/o_Note.css');" class="TableStyle_o_Note" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">
                        <p>If your application is setting affinity of the non-MCSAL threads, you should also set affinity of the MCSAL threads. This way,  the affinity of the MCSAL threads is disjoint from the other threads.</p>
                        <p>Setting affinity does not guarantee that a particular thread is permanently assigned to a particular core.  It depends on how closely the operating system adheres to the requested affinity setting.  For example, if another thread is running on the assigned core, but a different core is available, the operating system might use the available core.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Performance</p>
        <p class="Body">While waiting for the manager to assign it work, a worker thread polls.  Although you can modify this behavior using <a href="#sal_set_worker_wait_behavior">sal_set_worker_wait_behavior()</a>, you should set the number of threads for MCSAL to use to a value that is less than or equal to the number of cores available in your system. </p>
        <p class="Body">The default setting for the number of threads for MCSAL&#160;to use is the <code>SAL_N_THREADS_DEFAULT</code>. This does not mean that every MCSAL function invocation uses that many threads.  Functions will use fewer threads if it benefits performance.  </p>
        <p class="Body">To determine the number of threads that a SAL function has used, invoke the <a href="#sal_get_n_threads_used">sal_get_n_threads_used()</a> function immediately after the SAL function executes. </p>
        <table class="TableStyle_o_Note" style="width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 100%;">
            </col>
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">Alternatively, you can obtain the number of threads used through TATL. For more information, see the <i>Trace Analysis Tool and Library (TATL) User Guide</i>.</td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal   modified</p>
        <p class="Body1">The created, but not initialized <code>SAL_handle </code>to modify.</p>
        <p class="Parameter">p_core_affinity    input</p>
        <p class="Body1">An array of <i>n_threads</i> values.</p>
        <ul>
            <li class="Bullet2" value="1">If the value is <code>NULL</code>, an affinity is assigned to each MCSAL thread.</li>
            <li class="Bullet2" value="2">If the value is non-<code>NULL</code>, the value of an entry in this array must be:</li>
            <li class="BulletIndent1" value="3">
                <p>Greater than or equal to zero and less than the number of cores in the system.</p>
                <p class="or" MadCap:autonum="- or -"><span class="autonumber"><span>- or -</span></span>&#160;</p>
            </li>
            <li class="BulletIndent1" value="4">
                <p><code>SAL_SET_AFFINITY</code>. An affinity will be chosen for the thread.</p>
                <p class="or" MadCap:autonum="- or -"><span class="autonumber"><span>- or -</span></span>&#160;</p>
            </li>
            <li class="BulletIndent1" value="5"><code>SAL_DO_NOT_SET_AFFINITY</code>. No affinity will be set for that thread.</li>
        </ul>
        <p class="Body1">The thread that is in array element zero is the thread that invoked <a href="#sal_create">sal_create()</a> and this function.</p>
        <p class="Parameter">n_threads   input</p>
        <p class="Body1">The number of threads for MCSAL to use.</p>
        <p class="API_heads" style="page-break-before: always;margin-left: 1in;">Example</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 500px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>"/* The sal_set_core_affinity function is used in this example to specify that when sal_init() is called, MCSAL should not set the affinity of the calling thread, but should set affinity of the first two threads created to cores 1 and 2, and should choose a core for the third thread created. */</p>
                        <p>&#160;</p>
                        <p>SAL_i32 *core_affinity = { SAL_DO_NOT_SET_AFFINITY, 1, 2, SAL_SET_AFFINITY };</p>
                        <p>rc = sal_set_core_affinity( sal_handle, core_affinity, 4 );</p>
                        <p>CHECK_RC(rc);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation.  If the operation is not successful, an error code is returned.</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="#sal_set_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_get_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_get_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_get_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_get_core_affinity()</i></span></a>
        </p>
        <h2><a name="kanchor1193"></a>Get the Number of Threads and Their Affinity</h2>
        <p class="API_name"><a name="sal_get_core_affinity"></a>sal_get_core_affinity()</p>
        <p class="API_heads">Syntax</p>
        <table style="margin-right: auto;mc-table-style: url('../Resources/TableStyles/o_Code.css');caption-side: top;width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_get_core_affinity(</p>
                        <p>SAL_handle h_sal,</p>
                        <p>SAL_i32 **pp_core_affinity,</p>
                        <p>SAL_i32 *p_n_threads</p>
                        <p>);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads" style="page-break-before: always;margin-left: 1in;">Description</p>
        <p class="Body">The sal_get_core_affinity() function gets the number of MCSAL threads and their affinity to the processor cores.</p>
        <ul>
            <li value="1">If your application defines <code>SAL_ENABLE_MULTICORE</code>, you can use this function to determine the setting of affinity of threads to processor cores.</li>
            <li value="2">If your application does not define <code>SAL_ENABLE_MULTICORE</code>, this function has no effect.</li>
        </ul>
        <p class="Body">This function is called <i>after </i><a href="#sal_create">sal_create()</a> and <i>before </i><a href="#sal_destroy">sal_destroy()</a>.</p>
        <p class="Body">Only the thread that called <a href="#sal_create">sal_create()</a> should call the sal_get_core_affinity() function.</p>
        <table style="margin-right: auto;caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" class="TableStyle_o_Note" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">This function allocates memory. It is your responsibility to free this array.</td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal   input</p>
        <p class="Body1">Created <code>SAL_handle</code>.</p>
        <p class="Parameter">pp_core_affinity    allocated/initialized</p>
        <p class="Body1">An array of <i>n_threads</i> values.</p>
        <p class="Body1">The value of an entry in this array will be:</p>
        <ul>
            <li class="Bullet2" value="1">
                <p>Greater than or equal to zero and less than the number of cores in the system</p>
                <p>- or -</p>
            </li>
            <li class="Bullet2" value="2"><code>SAL_DO_NOT_SET_AFFINITY</code>. No affinity for this thread.</li>
        </ul>
        <p class="Body1">The thread that is in array element zero is the thread that invoked <a href="#sal_create">sal_create()</a> and this function.</p>
        <p class="Parameter">p_n_threads   output</p>
        <p class="Body1">The number of threads for MCSAL to use.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation.  If the operation is not successful, an error code is returned.</p>
        <p class="Related">&#160;</p>
        <p class="Body"><a href="#sal_set_n_threads" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_n_threads()</i></span></a>
        </p>
        <p class="Body"><a href="#sal_set_core_affinity" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>sal_set_core_affinity()</i></span></a>
        </p>
        <h2><a name="kanchor1194"></a>Print Information Contained in the SAL Handle</h2>
        <p class="API_name"><a name="sal_print_info"></a>sal_print_info()</p>
        <p class="API_heads">Syntax</p>
        <table style="mc-table-style: url('../Resources/TableStyles/o_Code.css');width: 500px;" class="TableStyle_o_Code" cellspacing="0">
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Code_Body_0_0_RowEnd_ColEnd">
                        <p>SAL_i32 sal_print_info (</p>
                        <p>SAL_handle h_sal,</p>
                        <p>FILE *file_ptr,</p>
                        <p>const SAL_char *msg,</p>
                        <p>SAL_i32 flag );</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The sal_print_info () function prints information contained in the SAL handle.</p>
        <p class="Body">The function assumes that <code>file_ptr </code>is open for writing. The data is printed to this file, one parameter per line. The data is preceded by the string that you enter in the <code>msg </code>parameter, as follows:</p>
        <p class="Body1"><code>msg var1_name var1_value</code> <![CDATA[ ]]></p>
        <p class="Body1"><code>msg var2_name var2_value</code> <![CDATA[ ]]></p>
        <p class="Body1"><code>msg var3_name var3_value</code> <![CDATA[ ]]></p>
        <p class="Body1"><code>. . .</code> <![CDATA[ ]]></p>
        <p class="Body">The message can be any combination of a user-defined strings and variables.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">h_sal 	input</p>
        <p class="Body1">The SAL_handle to modify.</p>
        <p class="Parameter">msg	 input</p>
        <p class="Body1">A character string consisting of anything you want to print preceding each SAL handle attribute. If you pass <code>NULL</code>, the empty string is used.</p>
        <p class="Parameter">file_ptr	 input</p>
        <p class="Body1">Specifies a pointer to a file where the SAL handle information is printed. If <code>NULL </code>is specified, stdout is used.</p>
        <p class="Parameter">flag	 input</p>
        <p class="Body1">Reserved. Pass <code>SAL_RESERVED_FLAG </code>instead.</p>
        <p class="API_heads">Return Codes</p>
        <p class="Parameter">SAL_SUCCESS</p>
        <p class="Body1">Successful operation. If the operation is not successful, an error code is returned.</p>
        <p class="API_heads">Performance</p>
        <p class="Body">Like other I/O functions, the sal_print_info() function might degrade your application’s performance. Mercury recommends that you use the sal_print_info() function for debugging purposes only.</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>