<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="743" MadCap:lastWidth="654" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - CCF/Image Processing|Image Processing" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="DB8ZFb0WCEcx9wrIXK2kt/vk418wRMVFD9PfYJG4fSxUs9M5gdfIxwdggwCLgH0TcFP285Or9E+LD24pK1a7nr7Q95H5sYaBwZm0cdp8UxiDimucuKTlKOnnlzpPRD26tUnKViGiAIk1JeBFVpCx0AsjUHSyxCRg0/RLWhH4L8N4ujP1eyHXZarKGwByu9BDghs+k713+su3DsWF8XUXcBcioVMEwCXEe6TOdoGfaAq+m2Zu42eVFyajykRmB6DkP2Amzt6Ml+64FNa5DmnmfZDlXDWYqjWamYOSqVdCHQdrYJDKI7wvURmKzxlttpTopyDQ8DHqkDA/w3g7N1aO2RU9CO7WIT+/vrDVlEMhRaTlekTehUSPlhdDB/YfNCsIzxEFswQ4Kr4nD8Lb4uWltaYkQzIz+OrUMf2EotWRWTN9mWiwRH/68FToToFH2cmQvqUAtnLbaqFPLPASEbATVbowcC4EoOMXrkeZqfROlSlOX4Dr4240zgfG0BALVvkqQpd0AVUi1g/pBhYFKYJuaBHt5MsgkTR7O9GZ9fKlU1HDYZ411b/Bb4PHLecYBll2J6u2LE3/pqb/gW29jYXBsYovcz6HJW65DNO1FCUDh585pLA42JyqgAyFElMnaCHYrlSKQwtPD2gaLEK+pCzG6n7S0YlY0ugu4awVu505dSKpMJYNw9stTxc+EzS8V5LAaIWy101xudQp1EjDkbAeOn0NDsobthTXl8ejY2SMXaCyM0y/iIuF2oNg0bViDvWrs1OZxsU+xBD4UU7NCH/17L6aTh3Vmy1QhFxa/O9TSMwtS7WDV0x+LomYLVk9IUbo264YC5kQWR7ytw7lXY2G/nAryHVsRr/r35E5Z0UuF7bg0BUDXsVpYq3ACtoseZ/c67iWRuMHpyGlN8llFZiThOkNQUNbef9/z8yxb6xLmPzAodl4TEPX7eN67rPyLv/iFJxDLhPmkRDnlqjJh3ApBAwyC6aEeSzWv/MTq89IwJe7vSmgBOkL3ofRA4SdXZG0iHJKq0gZl1jxPcyxM7/uq7ZhTbRxTZWiuUqhuBioy8BZk/e14wSTy6e2JVWH7vwt4PMA10bB1rMoJWgDNOlHwrFPRUfGv2wu04uvMRuICn0736iRLFmaLXCxi0F3K9TOy0JIEwErB9sBioJagMsLQqk8axWEXCprsLCyIbM3KepiPcjOtL428vIMmoBF6TMqZSgwpwRSDDcdgrJyrRkzW9U9WubjuvPzOHxLolYTlw4FEXdMYXlhsZV9qzeXSzYMQlyBkKlsY6/AW69cRhDXEgzQLvqn/bXlVqQJnYmS/p7Rg8wdZ6SN5ro7I7h3ouCPN9/to53SJ3OFxhiJsVJhkA==" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Image Back Projection Over Single Row</title>
        <link href="../../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../Default_CSH.htm#CH12 - Functions - CCF_Image_Processing/Image/Back Projection Over Single Row.htm" style="">Open topic with navigation</a>
        </p>
        <h2><a name="kanchor1139"></a>Image Back Projection Over Single Row</h2>
        <p class="API_name"><a name="bprojrowx"></a><a name="kanchor1140"></a>bprojrowx(), <a name="bprojrowdx"></a><a name="kanchor1141"></a>bprojrowdx()</p>
        <p class="Image">
            <img src="../../Resources/Images/SAL_funct_equat_197.jpg" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 54px;" />
            <col style="width: 123px;" />
            <col />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>bprojrowx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output row vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* an array of M projection vectors */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* row count for A; number of projections */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count for A; length of each projection */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* N &lt;= 32,768 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 Q,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* length of C;  q &lt;= 2,048 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *F,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; starting offsets into each projection in A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *G,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; delta values for each projection in A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>bprojrowdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output row vector */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* an array of M projection vectors */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* row count for A; number of projections */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count for A; length of each projection */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* N &lt;= 32,768 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 Q,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* length of C;  q &lt;= 2,048 */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *F,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; starting offsets into each projection in A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *G,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; delta values for each projection in A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The bprojrowx() and bprojrowdx() functions back-project a series of one-dimensional projection vectors from vector <i>A </i>onto one row of a two-dimensional image stored in vector <i>C</i>. Projection vector <i>A </i>provides <i>M </i>projections of length <i>N</i>. Each element of <i>C </i>is updated by adding a single value from each of the <i>M </i>projections in vector <i>A</i>. Since this function adds to preexisting values, calling functions should initialize <i>C </i>before the first call in a series of calls to this function.</p>
        <p class="Body">For each input projection from vector <i>A</i>, vectors <i>F </i>and <i>G </i>define a range of input values that accumulate in the output vector. Offsets from vector <i>F </i>determine which element of each projection vector is treated as input element zero. Vector <i>G </i>provides a series of delta values, one for each projection vector. These values act as fixed stepping increments, defining the succession of elements from each projection vector that accumulate in the output vector. Since calculated offsets into input vector <i>A </i>are truncated, add 0.5 to each element of <i>F </i>to force rounding instead of truncation.</p>
        <p class="Body">Values from vectors <i>F </i>and <i>G </i>do not have to be integers, and fractional values calculated from <i>F </i>and <i>G </i>are truncated. As a result, the same input value can accumulate in successive output elements. Make sure ranges defined <i>by F </i>and <i>G </i>remain in the input projection.</p>
        <p class="Body">An entire image can be back-projected from a set of projections with a series of calls to this function, one for each row of the image. Typically, vector <i>F </i>values vary for each call, while vector <i>G </i>values remain relatively stable.</p>
        <p class="Body">If the projections are too numerous to keep in memory, iterate the back-projection loop using different sets of projections and different values of <i>F </i>and <i>G </i>for each iteration. Between iterations, the next set of projections can be computed, overwriting the previous set.</p>
        <p class="Body">Initialize the entire image with zeros or a uniform background value before the first in a series of calls to these functions.</p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>