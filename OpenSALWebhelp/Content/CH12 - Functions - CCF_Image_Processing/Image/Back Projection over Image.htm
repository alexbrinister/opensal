<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="1463" MadCap:lastWidth="613" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Functions - CCF/Image Processing|Image Processing" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="H4lcieE1plSdlKLFkbBdf1eQzhAN0CWkiWqdmUley9GVnC0nH3UayVhnDoJNhOjEjkgzF1XHDVkf1X4wgnLdLwrbrIQVVLoxk+fECuLh5vPH0yd5MBUO1sYqcHKELu29ms2X+itKty3nxZyBocGhvikMh71WDO8g3ZBimS36Hkdy+GVYam8kLF1HLjeZKUcYGwTdh27cgQyCtvveJed1+dwyrKc8ekWInHkYHyntKK6DA4GcmFYwn1j5FAgL7tazy1GLV1MUaVwI0qnKj58lFI3Jo1QIuucu0qXfJpCi0LjCEdx8ccCJ7/lDn2ts37IrWlFEbat3jYixl7LJTg+uZXM1Fnfu1q8Wx0cjZmDroFrNRkqgVO81KKm4FC/K2eoOBhm2liv/lH+OHDxOWwWGRTGFWZxrUfhySmA1Iazksv7A1bHbpLbMns5poe3x44LHT7OIBq1adbHfH9pTZBdvp4841PbG9bIaVGEK6j0KXJ3Ylett6lOrCffueqzpciCT4+bPQVeK2hmcmUd+ILuwKVFgcU3pfIs+t4MMdXnyk+yLO0GfwNHYaTKDs4AXb5PDKVhoSbq8qOOQEeXEa5HnLXLJ+ORpU1hhoKAensloASqQWjCc1aTJih2BjDUunKQ5XVpSiN1UjGae7mZqT8lqNuYfpQQm9bblafIIoIseCKgDHvANkqI1Gtbkl6MFT7EyriCsl4+cVgK1hIQVnZcbG0bQKsIJ9dmaLVXVsE1lagp3+xgLKf10CyFpUdyrAQaF4KY+Da9OL6bjZh3BXTgWI8gCYBVyqUJ+uhnMOGbjWws+lXruV5mwJ5JxBTMqKEWIpOKHq9Y3EBNlAu0zKurCdEJXi/XSob2JYKaT/ClGE0qjRVG6Crhmau5WZafBuxmBTPw1khXyCqvA1ph6zis2cmF8E5wTOqDhyX6X7ikTMiEkE+46ejU1W89MEVKFznf4bgGN5jEMOmudsgV0K5yVCqu9ayBiMTUiFF+g6xAsB9oiD4xY5xs83xohto/SdeFXGW4HZNPolLp+mPDpBRtXhnPge8l1GbIysFl72h9JxGsg244iiWIEcdMrcgxkhReecV1BQWYFHaMYgBu8+NnFhNDwot6299Tt/gJxl+NIKs+LM5sFvdg37/AecOj4a1vx0DaQq2trprLvDmMsS6dB5WpBaFiDbzkqoT0TXHeGY9NTfSwAyzYG3jyZEVNXTIZ2vndkMTbOV3ogfyYuo2TptROPpikf5B+xU4qjA1374P0aqCvLiOglpuPozb1kzAJ8yhyguYcN4kx0nAuQIkKIpSyxUzddxQ2BjvHipJqxhb1sV7Hvu1SeAMB+Bh0vQ4Zh3rJ231HS0HPDTr2fpubEDA==" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Back Projection of Single Projection over Image</title>
        <link href="../../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../Default_CSH.htm#CH12 - Functions - CCF_Image_Processing/Image/Back Projection over Image.htm" style="">Open topic with navigation</a>
        </p>
        <h2><a name="kanchor1136"></a>Back Projection of Single Projection over Image</h2>
        <p class="API_name"><a name="bprojimgx"></a><a name="kanchor1137"></a>bprojimgx(), <a name="bprojimgdx"></a><a name="kanchor1138"></a>bprojimgdx()</p>
        <p class="Image">
            <img src="../../Resources/Images/SAL_funct_equat_196_214x123.jpg" style="width: 214; height: 123;" />
        </p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 124px;" />
            <col style="width: 320px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>bprojimgx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; one projection */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output image C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* row count for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; start offsets into each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *Q,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; output counts for each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *F,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; starting offsets into vector A for each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f32 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar; delta value for vector A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>bprojimgdx</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *A,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; one projection */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *C,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input-output image C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 M,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* row count for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 N,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column count for C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *P,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; start offsets into each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 *Q,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; output counts for each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *F,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input vector; starting offsets into vector A for each row of C */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_f64 *g,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* input scalar; delta value for vector A */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 eflag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* ESAL flag */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The bprojimgx() and bprojimgdx() functions back-project one-dimensional projection vector <i>A </i>onto each row of a two-dimensional input-output image <i>C</i>. Selected elements of <i>C </i>are updated by adding to each a single value from vector <i>A</i>. Since this function adds to preexisting values, calling functions should initialize <i>C </i>before the first call in a series of calls to this function.</p>
        <p class="Body">For each row of <i>C</i>, vectors <i>P </i>and <i>Q </i>define an output range and vector <i>F </i>defines a starting offset into input vector <i>A</i>. Each output row vector <i>P </i>value defines the first element to receive a value from the input projection. Each output row vector <i>q </i>value defines how many succeeding elements receive a value from the input projection. For each row element in the range defined by <i>P </i>and <i>Q</i>, a value from vector <i>A </i>accumulates in the image <i>C</i>. All row values outside this range remain unchanged.</p>
        <p class="Body">Offsets from vector <i>F </i>select the element from <i>A </i>to treat as input element zero for each row of <i>C</i>. Since calculated offsets into input vector <i>A </i>are truncated, add 0.5 to each element of vector <i>F </i>to force rounding instead of truncation.</p>
        <p class="Body">Scalar <i>g </i>provides a delta value for projection vector <i>A</i>. This value acts as a fixed stepping increment through projection vector <i>A</i>, defining the sequence of elements from vector <i>A </i>that accumulate in the output vectors. Values from <i>F </i>and <i>G </i>do not have to be integers, and fractional offsets calculated from <i>F </i>and <i>G </i>are truncated. As a result, the same input value can accumulate in more than one element of an output row. Make sure that ranges defined by <i>F </i>and <i>G </i>remain within the input projection.</p>
        <p class="Body">An entire image can be back-projected from a set of projection vectors with a series of calls to this function, one for each projection. Typically, values for vector <i>F </i>and scalar <i>G </i>vary for each call, while values for vectors <i>P </i>and <i>Q </i>do not. Initialize the entire image with zeros or a uniform background value before the first in a series of calls to this function.</p>
        <p class="Body">For best performance, store vector <i>A </i>in cacheable memory.</p>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>