<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="2256" MadCap:lastWidth="613" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:liveHelp="QF7ZVqN8kWgEd1grXr9UN3OJ+ygGqvlG1SP+4UpjZ/aYneJqwq49jqZsoDNXgStxmE0uAyCwPL4nmOCCNC1qakvZmSHkYtlVpQ6OuMGvPl4xPUQBbKksh1ouTpaN2mmRt6BPfGM+gDPJrH06WFBQEahASDdluCQ800ssh7tWPEhQhp01bgM/j1/m7zpXV9cfpxjcPBs6KwiEcz6Qs7RVMwe3TW3EtYY4jKG+lHYFuFI7PQRRO1nJIHuSkC+fh86amA9Na4yEjzg9Lo3CklWI/FJ20Nj/cCOzBiaBoPLzYgJFKUanDc53FxExSexKlOB9tJyx+A+9KC6b3Aa/cGKShl5xb304bdvTtQhq1RnWndXkWkMAch1WoZ0FeQHUs3GxaxjnxGeQuM7MPO6lJCxA0FnxnZxlZf5jAXT201NneA0pVxF5THQUnhMAg4LQ3uEebEMAEySdCQQngffyjXYa2QXjxu+rtzlBSJR5fwq+/FiaKKI7qr3AiAJbz+W+yei6fqnI8AkClj+66n+oqttJWw2hbbtqArRhrZpbmKBJRCmzeVKKtSZS5fcc79NWdbwhnq+ADdKgMeLv29354BvhOrQGs+XjOIp8qg1G3/KgxJZ9+T0qDhaS2PoUKBRpGfsEWwNiQtdyfxikvoh9ZkUy8MLstoSn8/z+IgWG/+BAc/6RwkDxLC3AVpBHsNUtPMKFRyPQR/fiju8O1L1RfFHK9PzSG7Q9LBW6qQXMniHcaWpqcDFLmY23bCbZ+FNcfagzIsduKkTZiq8v/Jy9WAnaQWd6zcXeJl+cQD5FOHHbYsWLBjrAyvEKvYk/Hiy1TvRrsphBzbehNw11JTDbk4rgoXbDwrCgU9tsEaHmesnkeO5okySucfsKAOBLNawJqg6z5cXAVBi/MBALZf2+wRQR53uXJW7g/Vl6b+2THkKH7fObDbITAMu4QYLBz4wgjZ9u0UBOlMisBsslTUXXDpji9ibY3401rjIp3CIrvzHaXluflsCdIYwEW1iaiKn7xHFA" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" /><title>Pre-Load Data from Memory to Cache</title>
        <link href="../Resources/TableStyles/o_CodeIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/o_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_CodeIndent.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Note.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/TableStyles/p_Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/BookStyles.css" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpUtilities.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapLiveHelpBody.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAddCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapReplyCommentDialog.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapRegisterUserDialog.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../Default_CSH.htm#CH13 - Functions - System Control/PreLoad Data.htm" style="">Open topic with navigation</a>
        </p>
        <h2><a name="kanchor1158"></a>Pre-Load Data from Memory to Cache</h2>
        <p class="API_name"><a name="cache_load_1d"></a><a name="kanchor1159"></a>cache_load_1d(), <a name="cache_load_2d"></a><a name="kanchor1160"></a>cache_load_2d()</p>
        <p class="API_heads">Syntax</p>
        <table style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Code.css');" class="TableStyle_o_Code" cellspacing="0">
            <col style="width: 55px;" />
            <col style="width: 152px;" />
            <col style="width: 293px;" />
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cache_load_1d</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">char *pData,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to the data (vector) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 nbytes,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* number of bytes to load */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 channel,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* load channel (0, 1, 2, or 3) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 flag );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* load mode */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep" colspan="3">void <b>cache_load_2d</b>(</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">char *pData,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* pointer to the data (matrix) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 tcols,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* column stride (in bytes) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 nr,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* number of rows to load */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 nc,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* row length (in bytes) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 channel,</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* load channel (0, 1, 2, or 3) */</td>
            </tr>
            <tr>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">&#160;</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColSep">SAL_i32 flag  );</td>
                <td class="TableStyle_o_Code_Body_0_0_RowSep_ColEnd">/* load mode */</td>
            </tr>
        </table>
        <p class="API_heads">Description</p>
        <p class="Body">The cache_load_1d() and cache_load_2d() functions help to avoid the LMQ stall and improve performance by pre-loading a vector or a matrix from unguarded DRAM or L2 memory into the L1 data cache. If you choose to operate on a vector or a matrix with your own math function instead of a SAL function, use the cache_load_{1|2}d() functions to pre-load the vector or matrix into the L1 cache.</p>
        <table class="TableStyle_o_Note" style="caption-side: top;width: 500px;mc-table-style: url('../Resources/TableStyles/o_Note.css');" cellspacing="0">
            <col style="width: 500px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowSep_ColEnd">
                        <p class="Note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #06347a;&quot; class=&quot;mcFormatColor&quot;&gt;Note&lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #06347a;" class="mcFormatColor">Note</span></b></span></span>&#160;</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_o_Note_Body_0_0_RowEnd_ColEnd">
                        <p>You can use the SAL cache management functions only with:</p>
                        <ul class="TableBullets">
                            <li value="1"> PowerPC 7445/7447 </li>
                            <li value="2">non-SAL-based data processing</li>
                        </ul>
                        <p>If you use other hardware or SAL functions for data processing, these functions can adversely affect your application’s performance.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Body">SAL functions do their best to manage the caches on your behalf. They pre-load data into the L1 cache in strips before operating. Do not call these functions to pre-load data into the L1 cache before calling a SAL function.</p>
        <p class="Body">For the best performance, your application should strip-mine data over multiple SAL calls with strips that fit into the L1 cache. The goal is to maximize data reuse. When strip-mining over multiple SAL calls, use <code>ESAL </code>flags to indicate which buffers are already in the L1 cache.</p>
        <p class="Body">Pre-loading data to avoid the LMQ and SMQ stalls is helpful only when the sum of all of the pre-loaded data fits into the L1 cache. Make your application strip-mine in a way that keeps the sum of all of the working strips smaller than the size of the L1 cache.</p>
        <p class="API_heads">Parameters</p>
        <p class="Parameter">channel</p>
        <p class="Body1">Indicates a unique channel number between <span style="font-family: serif;">0</span> and 3 when issuing multiple simultaneous cache_load_{1|2}d() calls with the <code>SAL_CACHE_ASYNCHRONOUS </code>flag. This parameter is ignored when the load mode is synchronous.</p>
        <p class="Parameter">flag</p>
        <p class="Body1">Specify one of the following flag values:</p>
        <p class="ParameterIndent">SAL_CACHE_SYNCHRONOUS</p>
        <p class="Body2">Synchronous load mode causes cache_load_{1|2}d() to touch-load data into the cache using lwz instructions. The channel parameter is ignored. This option (default) is most effective when the data resides in DRAM.</p>
        <p class="ParameterIndent">SAL_CACHE_ASYNCHRONOUS</p>
        <p class="Body2">Asynchronous load mode causes cache_load_{1|2}d() to issue a coarse-grained DST instruction. The DST asynchronously loads data into the L1 data cache. The PPC 7447 supports up to four simultaneous DST channels. This option is most effective when the data resides in L2 cache.</p>
        <p class="API_heads">Examples of <a name="Cache_Control_Function_Usage"></a>Cache Control Function Usage</p>
        <p class="Body1" style="font-weight: bold;page-break-after: avoid;">Calling SAL Functions</p>
        <table class="TableStyle_o_CodeIndent" style="caption-side: top;width: 475px;mc-table-style: url('../Resources/TableStyles/o_CodeIndent.css');" cellspacing="0">
            <col style="width: 473px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_CodeIndent_Body_0_0_RowEnd_ColEnd">vaddx(pSrc0,stride_0,pSrc1,stride_1,pDst,stride_dst,len,SAL_NNN);</td>
                </tr>
            </tbody>
        </table>
        <p class="Body1">The SAL_NNN ESAL flag indicates to the SAL function that the three vectors are not in the L1 cache. Therefore, the SAL function pre-loads the input vectors in strips into the L1 cache before processing them to avoid the LMQ stall. Additionally, the store instructions are ordered in a sequential fashion to avoid the SMQ stall. Therefore, it is not necessary to preload the input or output vectors into the L1 cache when calling a SAL function.</p>
        <p class="Body1" style="font-weight: bold;page-break-after: avoid;">Calling Non-SAL Math Functions, 1</p>
        <table class="TableStyle_o_CodeIndent" style="caption-side: top;width: 475px;mc-table-style: url('../Resources/TableStyles/o_CodeIndent.css');" cellspacing="0">
            <col style="width: 472px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_CodeIndent_Body_0_0_RowEnd_ColEnd">
                        <p>cache_load_1d(pSrc,nbytes,channel_num_0,SAL_CACHE_SYNCHRONOUS);</p>
                        <p>cache_zero_1d(pDst,nbytes,channel_num_1,SAL_CACHE_SYNCHRONOUS);</p>
                        <p>your_math_function_1(pSrc,pDst,len);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Body1">In this example, the buffers pSrc (input vector) and pDst (output vector) are passed to a non-SAL function. Operating on these buffers can cause the LMQ or SMQ stall in PPC 7447 if these buffers are not in the L1 cache before your function is called.</p>
        <p class="Body1">Mercury recommends calling cache_load_{1|2}d() to load the input vector into the L1 cache and calling cache_zero_{1|2}d() to allocate space for the output vector in the L1 cache before you call the math function. Caching the input and output buffers in the L1 cache before operating on them helps to avoid the LMQ and SMQ stall.</p>
        <p class="Body1" style="font-weight: bold;page-break-after: avoid;">Calling Non-SAL Math Functions, 2</p>
        <table class="TableStyle_o_CodeIndent" style="caption-side: top;width: 475px;mc-table-style: url('../Resources/TableStyles/o_CodeIndent.css');" cellspacing="0">
            <col style="width: 472px;" />
            <tbody>
                <tr>
                    <td class="TableStyle_o_CodeIndent_Body_0_0_RowEnd_ColEnd">
                        <p>cache_load_1d(pSrc,nbytes,channel_num_0,SAL_CACHE_SYNCHRONOUS);</p>
                        <p>cache_load_1d(pSrcDst,nbytes,channel_num_1,SAL_CACHE_SYNCHRONOUS);</p>
                        <p>your_math_function_2(pSrc0,pSrcDst,pSrcDst,len);</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Body1">In this example, the pSrc input buffer and the pSrcDst input and output buffer are passed to a non-SAL function. If these buffers are not in the L1 cache before the function is invoked, operating on these buffers can cause the LMQ or SMQ to stall in PPC 7447.</p>
        <p class="Body1">Mercury recommends calling cache_load_{1|2}d() to load the first input vector into the L1 cache.  In this instance, do not use cache_zero_{1|2}d(); the output buffer also serves as an input buffer. Instead, load the pSrcDst buffer into the L1 cache with cache_load_{1|2}d().</p>
        <p class="RelatedFunctions" MadCap:autonum="Related Functions"><span class="autonumber"><span>Related Functions</span></span>&#160;</p>
        <p class="Body"><a href="Flush L1 L2 Cache.htm#cache_flush_1d" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cache_flush_1d(), cache_flush_2d()</i></span></a>
        </p>
        <p class="Body"><a href="Fill Cache Buffer With Zeros.htm#cache_zero_1d" target="" title="" alt="" class="MCXref_See_NoPrefix" MadCap:conditions="Default.ScreenOnly"><span style="color: DarkBlue;" class="mcFormatColor"><i>cache_zero_1d(), cache_zero_2d()</i></span></a>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script><iframe id="topiccomments" name="topiccomments" title="Topic Comments" src="../../Skin/TopicComments.htm" frameborder="0" style="width: 100%; height: 0px; margin-top: 12px;"></iframe>
    </body>
</html>